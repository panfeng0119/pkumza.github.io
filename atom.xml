<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zablog</title>
  <subtitle>疾风知劲草 岁寒见后凋</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zablog.me/"/>
  <updated>2017-09-08T02:21:39.000Z</updated>
  <id>http://zablog.me/</id>
  
  <author>
    <name>Zachary Marv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go-技篇第二 命名规范</title>
    <link href="http://zablog.me/2017/09/08/go_tricks_and_tips_2/"/>
    <id>http://zablog.me/2017/09/08/go_tricks_and_tips_2/</id>
    <published>2017-09-08T03:00:00.000Z</published>
    <updated>2017-09-08T02:21:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要讲述Go语言的命名规范。<br>优秀的代码必须具备良好的可读性，而可读性的关键即在于命名风格。</p>
<a id="more"></a>
<p><a href="http://zablog.me/2017/09/08/go_tricks_and_tips_2/">原文链接: http://zablog.me/2017/09/08/go_tricks_and_tips_2/</a></p>
<h2 id="优秀的命名"><a href="#优秀的命名" class="headerlink" title="优秀的命名"></a>优秀的命名</h2><p>优秀的命名应当是一贯的、短小的、精确的。<br>所谓一贯，就是说同一个意义在不同的环境下的命名应当一致，譬如依赖关系，不要在一个方法中命名为depend，另一个方法中命名为rely。<br>所谓短小，不必多言，当命名过长的时候，读者可能更关注命名本身，而忽视真正的逻辑内容。<br>所谓精确，就是命名达意、易于理解</p>
<h2 id="首条经验"><a href="#首条经验" class="headerlink" title="首条经验"></a>首条经验</h2><p>声明位置与使用位置越远，则命名应当越长。</p>
<h2 id="骆驼命名法"><a href="#骆驼命名法" class="headerlink" title="骆驼命名法"></a>骆驼命名法</h2><p>Go语言应该使用 MixedCase<br>(不要使用 names_with_underscores)<br>首字母缩写词都应该用大写,譬如<code>ServeHTTP</code>、<code>sceneID</code>、<code>CIDRProcessor</code>。</p>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>局部变量应当尽可能短小，譬如使用<code>buf</code>指代<code>buffer</code>，使用<code>i</code>指代<code>index</code><br>在很长的函数中可能会有很多的变量，这个时候可以适当使用一些长名字。<br>但是写出这么长的函数，通常意味着代码需要重构了！🙅🏻‍</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>函数的参数和局部变量类似，但是它们默认还具有文档的功能<br>当参数类型具有描述性的时候，参数名就应该尽可能短小：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">AfterFunc</span><span class="params">(d Duration, f <span class="keyword">func</span>()</span>) *<span class="title">Timer</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">func</span> <span class="title">Escape</span><span class="params">(w io.Writer, s []<span class="keyword">byte</span>)</span></span></div></pre></td></tr></table></figure>
<p>当参数类型比较模糊的时候，参数名就应当具有文档的功能：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unix</span><span class="params">(sec, nsec <span class="keyword">int64</span>)</span> <span class="title">Time</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">func</span> <span class="title">HasPrefix</span><span class="params">(s, prefix []<span class="keyword">byte</span>)</span> <span class="title">bool</span></span></div></pre></td></tr></table></figure>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>在Go语言中，返回值可以定义名称的，它可以当做一种特殊的参数。<br>尤其重要的是，在外部可见的函数中，返回值的名称应当可以作为文档参考。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Copy</span><span class="params">(dst Writer, src Reader)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">func</span> <span class="title">ScanBytes</span><span class="params">(data []<span class="keyword">byte</span>, atEOF <span class="keyword">bool</span>)</span> <span class="params">(advance <span class="keyword">int</span>, token []<span class="keyword">byte</span>,</span></span></div><div class="line"><span class="function"><span class="params"> err error)</span></span></div></pre></td></tr></table></figure>
<h2 id="方法接收者（Receiver）"><a href="#方法接收者（Receiver）" class="headerlink" title="方法接收者（Receiver）"></a>方法接收者（Receiver）</h2><p>方法接收者也是一种特殊的参数。Go语言中没有明显的面向对象的概念，可以对方法定义方法接收者来实现类似于对象的方法的概念。</p>
<p>按照惯例，由于方法接收者在函数内部经常出现，因此它经常采用一两个字母来标识方法接收者的类型。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Buffer)</span> <span class="title">Read</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">func</span> <span class="params">(sh serverHandler)</span> <span class="title">ServeHTTP</span><span class="params">(rw ResponseWriter, req *Request)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">func</span> <span class="params">(r Rectangle)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">Point</span></span></div></pre></td></tr></table></figure>
<p>需要注意的是，方法接收者的名字在同一类型的不同方法中应该保持统一，这也是前文所述的一贯性的需求。</p>
<h2 id="导出包级别命名"><a href="#导出包级别命名" class="headerlink" title="导出包级别命名"></a>导出包级别命名</h2><p>导出名被使用的时候通常是放在包名后<br>所以，在导出变量、常数、函数和类型的时候，<br>不要把包名的意义再写一遍</p>
<p>比较好的名字<br><code>bytes.Buffer</code> <code>strings.Reader</code></p>
<p>比较蠢的名字<br><code>bytes.ByteBuffer</code> <code>strings.StringReader</code></p>
<h2 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h2><p>只含有一个方法的接口类型通常以函数名加上<code>er</code>后缀作为名字</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</div><div class="line">    Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有时候可能导致蹩脚的英文，但别管他，能看懂就好</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Execer <span class="keyword">interface</span> &#123;</div><div class="line">    Exec(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有时候可以适当调整一下英文单词的顺序，增加可读性：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ByteReader <span class="keyword">interface</span> &#123;</div><div class="line">    ReadByte(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当接口含有多个方法的时候，还是要选取一个能够精准描述接口目的的名字，譬如<code>net.Conn</code>、<code>http/ResponseWriter</code></p>
<h2 id="Error的命名"><a href="#Error的命名" class="headerlink" title="Error的命名"></a>Error的命名</h2><p>Error类型应该写成FooError的形式</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ExitError <span class="keyword">struct</span> &#123;</div><div class="line">	....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Error变量协程ErrFoo的形式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var ErrFormat = errors.New(&quot;unknown format&quot;)</div></pre></td></tr></table></figure>
<h2 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h2><p>应当与它导出代码的内容相关，避免<code>util</code>、<code>common</code>这种宽泛的命名</p>
<h2 id="引入路径"><a href="#引入路径" class="headerlink" title="引入路径"></a>引入路径</h2><p>包路径的最后一个单词应该和包名一致</p>
<p>包路径应该尽可能简洁</p>
<p>记得把库的主要代码直接放在代码库的根目录</p>
<p>避免在包路径中使用任何大写字母（并非所有文件系统都区分大小写）</p>
<h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><p>上述很多例子都是从标准库中来的</p>
<p>标准库的很多内容都可以作为参考<br>多看看标准库来寻求灵感吧</p>
<p>但是要记住：</p>
<p>当作者写标准库的时候，他们自己也在学习过程中。<br>多数情况下作者是对的，但是偶尔还是会犯一些错误</p>
<p><hr></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="https://talks.golang.org/2014/names.slide" target="_blank" rel="external">What’s in a name? - Andrew Gerrand</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要讲述Go语言的命名规范。&lt;br&gt;优秀的代码必须具备良好的可读性，而可读性的关键即在于命名风格。&lt;/p&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://zablog.me/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="go" scheme="http://zablog.me/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Go-技篇第一 技巧杂烩</title>
    <link href="http://zablog.me/2017/09/04/go_tricks_and_tips/"/>
    <id>http://zablog.me/2017/09/04/go_tricks_and_tips/</id>
    <published>2017-09-04T13:00:00.000Z</published>
    <updated>2017-09-08T02:20:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>七个Go语言小技巧，后续持续更新。<br>无论是Go语言小白，还是有经验的开发者，都可能从中获取灵感。</p>
<a id="more"></a>
<h2 id="一句话技巧"><a href="#一句话技巧" class="headerlink" title="一句话技巧"></a>一句话技巧</h2><ul>
<li>把你面向对象的大脑扔到家里吧，去拥抱接口。<a href="https://twitter.com/mikegehard" target="_blank" rel="external">@mikegehard</a></li>
<li>学习如何使用Go的方式做事，不要把别的的编程风格强行用在Go里面。<a href="https://twitter.com/drnic" target="_blank" rel="external">@DrNic</a></li>
<li>多用接口总比少用好。<a href="https://twitter.com/evanphx" target="_blank" rel="external">@evanphx</a></li>
<li>拥抱这种简洁、并行、工整的语言。<a href="">@francesc</a></li>
<li>阅读官网<a href="http://golang.org/" target="_blank" rel="external">golang.org</a>上所有的文档，真是棒呆了。<a href="https://twitter.com/vbatts" target="_blank" rel="external">@vbatts</a></li>
<li>别忘了用<code>gofmt</code>。<a href="https://twitter.com/darkhelmetlive" target="_blank" rel="external">@darkhelmetlive</a></li>
<li>多读源代码。<a href="https://twitter.com/drnic" target="_blank" rel="external">@DrNic</a></li>
<li>学习工具和组件，然后创造你自己的！码代码和学代码一样对成功必不可少。<a href="https://twitter.com/coreyprak" target="_blank" rel="external">@coreyprak</a></li>
<li>学而不思则罔，思而不学则殆。<a href="https://www.zhihu.com/question/21111579" target="_blank" rel="external">《论语》</a></li>
</ul>
<h2 id="引入package的多种方式"><a href="#引入package的多种方式" class="headerlink" title="引入package的多种方式"></a>引入package的多种方式</h2><p>有几种非常规方式来引入包（package）。接下来我会使用<code>fmt</code>来作为例子：</p>
<ul>
<li><code>import format &quot;fmt&quot;</code> - 为<code>fmt</code>创造一个别名。把代码中所有使用到<code>fmt</code>的内容用<code>format.</code>代替<code>fmt.</code></li>
<li><code>import . &quot;fmt&quot;</code> - 允许包内的内容不加<code>fmt</code>前缀而被被直接引用</li>
<li><code>import _ &quot;fmt&quot;</code> - 阻止编译器为引入<code>fmt</code>却不使用里面的内容做引发的警告，执行package中的初始化函数。提醒一句，在这种情况下<code>fmt</code>是不可调用的</li>
</ul>
<p>看这篇<a href="http://learngowith.me/alternate-ways-of-importing-packages/" target="_blank" rel="external">博客</a>来了解更多细节。</p>
<h2 id="Goimports"><a href="#Goimports" class="headerlink" title="Goimports"></a>Goimports</h2><p>命令<code>goimports</code>可以更新您的Go导入行，添加缺少的行，并删除未引用的引导行。</p>
<p>它拥有和<code>gofmt</code>(插入式替换)相同的能力，但是<code>goimports</code>额外增加了修复imports的功能。</p>
<h2 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h2><p>Go是一种相对来说易学习的编程语言，但对于开发者来说，起初接触这门语言最困难的事情就是如何组织代码。<code>scaffolding</code>是人们喜欢<code>Rails</code>的原因之一，它可以给新晋的开发者清晰的方向，让他们明白在哪里插入代码，应该遵循怎样的编程风格。</p>
<p>作为扩展，Go使用<code>go fmt</code>这样的工具来提供开发者相同的功能。同样地，Go的编译器非常严格，它不会去编译没有使用的变量，或者没有使用的import声明。</p>
<h2 id="自定义构造函数"><a href="#自定义构造函数" class="headerlink" title="自定义构造函数"></a>自定义构造函数</h2><p>我经常听到别人问，“我什么时候应该使用像<code>NewJob</code>这样的自定义构造函数？”，我的回答是“大多数情形下你没必要这么做”。然而，当你需要在初始化的时候就设置值，且你有一些默认值的时候，这就最好使用一个构造函数。在这个例子中，构造函数就比较有意义了，因此我们用如下的代码可以构建一个默认的logger：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Job <span class="keyword">struct</span> &#123;</div><div class="line">	Command <span class="keyword">string</span></div><div class="line">	*log.Logger</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewJob</span><span class="params">(command <span class="keyword">string</span>)</span> *<span class="title">Job</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> &amp;Job&#123;command, log.New(os.Stderr, <span class="string">"Job: "</span>, log.Ldate)&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	NewJob(<span class="string">"demo"</span>).Print(<span class="string">"starting now..."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="把代码分解到不同的package中"><a href="#把代码分解到不同的package中" class="headerlink" title="把代码分解到不同的package中"></a>把代码分解到不同的package中</h2><p>参考这篇博客<a href="http://matt.aimonetti.net/posts/2014/04/28/refactoring-go-code/" target="_blank" rel="external">重构Go代码</a>，第一部分就讲了package的组织。</p>
<p>以工程<code>Gobot</code>为例，它可以被分割为一个核心package和一些其他package。gobot的开发者们准备每个部分放在自己的package里。经过讨论，他们选择把所有的官方库放在同一个repository下，让import路径变得干净而富有逻辑。</p>
<p>所以，他们不打算把路径设置为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">github.com/hybridgroup/gobot</div><div class="line">github.com/hybridgroup/gobot-sphero</div><div class="line">github.com/hybridgroup/gobot-...</div></pre></td></tr></table></figure>
<p>而是设置为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">github.com/hybridgroup/gobot</div><div class="line">github.com/hybridgroup/gobot/sphero</div><div class="line">github.com/hybridgroup/gobot/...</div></pre></td></tr></table></figure>
<p>现在package的名字不再是冗长的gobot-sphero，而变成了简要的sphero。</p>
<h2 id="集合（Sets）"><a href="#集合（Sets）" class="headerlink" title="集合（Sets）"></a>集合（Sets）</h2><p>在其他的程序语言中，经常会有一种数据结构叫做sets，它允许把元素存入，但是不允许重复。Go并不直接支持这种结构，但是这个结构在Go里面的实现并不困难。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UniqStr returns a copy if the passed slice with only unique string results.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">UniqStr</span><span class="params">(col []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</div><div class="line">	m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</div><div class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> col &#123;</div><div class="line">		<span class="keyword">if</span> _, ok := m[v]; !ok &#123;</div><div class="line">			m[v] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	list := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(m))</div><div class="line"></div><div class="line">	i := <span class="number">0</span></div><div class="line">	<span class="keyword">for</span> v := <span class="keyword">range</span> m &#123;</div><div class="line">		list[i] = v</div><div class="line">		i++</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> list</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://play.golang.org/p/AtG9pTe8yt" target="_blank" rel="external">Playground链接</a></p>
<p>在这里，我会使用一些非常有意思的花招。首先，对空结构的映射：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</div></pre></td></tr></table></figure>
<p>我们创建了一个<code>map</code>，这可以确保<code>key</code>是独一无二的，而相关联的<code>value</code>其实是我们不关心的。<br>我们当然可以使用：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>但是，使用空结构体可以达到同样的效率，同时不会占用额外的内存。</p>
<p>第二个花招的意味更为深远：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> _, ok := m[v]; !ok &#123;</div><div class="line">  m[v] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里做的事情就是确认map <code>m</code>中的某个值是否存在，而不关心<code>value</code>本身。如果发现没有对应的值，就去加一个。当然，不去验证直接加好像也没有什么区别。</p>
<p>一旦我们拥有了一个充满独一无二key的map以后，就可以把他们放到一个切片里，返回结果了。</p>
<p>这里有一段测试代码，正如你所见，这里使用了一个符合Go语言单元测试风格的表格测试：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUniqStr</span><span class="params">(t *testing.T)</span></span> &#123;</div><div class="line"></div><div class="line">	data := []<span class="keyword">struct</span>&#123; in, out []<span class="keyword">string</span> &#125;&#123;</div><div class="line">		&#123;[]<span class="keyword">string</span>&#123;&#125;, []<span class="keyword">string</span>&#123;&#125;&#125;,</div><div class="line">		&#123;[]<span class="keyword">string</span>&#123;<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>&#125;, []<span class="keyword">string</span>&#123;<span class="string">""</span>&#125;&#125;,</div><div class="line">		&#123;[]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"a"</span>&#125;, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>&#125;&#125;,</div><div class="line">		&#123;[]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>&#125;, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;&#125;,</div><div class="line">		&#123;[]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>&#125;, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;&#125;,</div><div class="line">		&#123;[]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>&#125;, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;&#125;,</div><div class="line">		&#123;[]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>&#125;, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;&#125;,</div><div class="line">		&#123;[]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;, []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;&#125;,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> _, exp := <span class="keyword">range</span> data &#123;</div><div class="line">		res := UniqStr(exp.in)</div><div class="line">		<span class="keyword">if</span> !reflect.DeepEqual(res, exp.out) &#123;</div><div class="line">			t.Fatalf(<span class="string">"%q didn't match %q\n"</span>, res, exp.out)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过测试发现，并非每次都能够成功，而是有概率的。因为map是使用hashmap实现的，使用range进行遍历的时候，其遍历顺序和字符串的内容没有必然联系，因此此test有可能失败。在进行DeapEqual比对的时候，可能会爆出类似于<code>[&quot;b&quot; &quot;c&quot; &quot;a&quot;] didn&#39;t match [&quot;a&quot; &quot;b&quot; &quot;c&quot;]</code>的错误。当然，在<a href="https://play.golang.org/p/elRIpSKGjD" target="_blank" rel="external">Playground</a>中，每次执行的上下文环境一模一样，因此这里的test是总能通过的。</p>
<h2 id="依赖包管理"><a href="#依赖包管理" class="headerlink" title="依赖包管理"></a>依赖包管理</h2><p>很遗憾，Go语言官方并不提供依赖包管理系统。这很可能是因为go语言植根于C语言的文化，因此它没有办法引入特定版本的包。</p>
<p>这会带来一些严重的问题：</p>
<ol>
<li>当多个开发者共同维护一个项目时，不同开发者的依赖版本可能不同。</li>
<li>依赖也会有他们自身的依赖，所以很难确保所有的依赖都使用同一个版本。</li>
<li>你的多个项目基于了同一个依赖的不同版本。</li>
</ol>
<p>对于最后一种情形，可以通过搭建一个_持续集成环境(Continuous<em>integration)</em>来解决，但是前两者就相对困难。</p>
<p><hr></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="http://www.golangbootcamp.com/book/tricks_and_tips" target="_blank" rel="external"><em>GO BOOTCAMP - Everything you need to know to get started with Go : Tips and Tricks</em></a></li>
<li><a href="https://www.zhihu.com/question/21111579" target="_blank" rel="external">论语</a></li>
<li><a href="http://matt.aimonetti.net/posts/2014/04/28/refactoring-go-code/" target="_blank" rel="external">refactoring Go code</a></li>
<li><a href="http://learngowith.me/alternate-ways-of-importing-packages/" target="_blank" rel="external">Alternate Ways of Importing Packages</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;七个Go语言小技巧，后续持续更新。&lt;br&gt;无论是Go语言小白，还是有经验的开发者，都可能从中获取灵感。&lt;/p&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://zablog.me/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="go" scheme="http://zablog.me/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>每周一个Github项目【第五期】free-programming-books</title>
    <link href="http://zablog.me/2017/09/01/github_free-programming-books/"/>
    <id>http://zablog.me/2017/09/01/github_free-programming-books/</id>
    <published>2017-09-01T10:00:00.000Z</published>
    <updated>2017-09-01T16:12:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>📚 免费的编程书 // 📚 Freely available programming books<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>Freely available programming books</th>
</tr>
</thead>
<tbody>
<tr>
<td>地址</td>
<td><a href="https://github.com/EbookFoundation/free-programming-books" target="_blank" rel="external">Github</a></td>
</tr>
<tr>
<td>组织</td>
<td>EbookFoundation</td>
</tr>
<tr>
<td>Brief Intro</td>
<td>📚 Freely available programming books</td>
</tr>
<tr>
<td>LICENSE</td>
<td>Creative Commons Attribution 4.0 International License</td>
</tr>
<tr>
<td>starts</td>
<td>92,214</td>
</tr>
</tbody>
</table>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>这周比较忙，所以就不介绍一些需要深入了解的Repo了，写一个比较水的，但是点赞数特别多的。</p>
<p>这一个Repo在Github上的Star数目为92.2k，为世界第三，但是对应的编程语言却是空。如果非要说一种语言的话，那么这个repo是用markdown来组成的。</p>
<p>里面免费的书籍实在是太多了，汇集各种语言、各类领域的计算机类免费书籍，支持的语言也有26种之多，大家可以重点关注一下<a href="https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external">中文书籍</a>和<a href="https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md" target="_blank" rel="external">英文书籍</a></p>
<p>顺便一提下，想搜搜看Github上最最最最最火的Repo，点<a href="https://github.com/search?o=desc&amp;q=stars%3A%3E1000&amp;s=stars&amp;type=Repositories&amp;utf8=%E2%9C%93" target="_blank" rel="external">这个链接</a>就可以了。越火的repo，相关介绍也就越多，中文版的也有，所以接下来一般不会选择太火的介绍。如果又介绍了个，只能说明近期较忙啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📚 免费的编程书 // 📚 Freely available programming books&lt;br&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://zablog.me/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Github Every Week" scheme="http://zablog.me/tags/Github-Every-Week/"/>
    
  </entry>
  
  <entry>
    <title>每周一个Github项目【第四期】hugo</title>
    <link href="http://zablog.me/2017/08/27/github_hugo/"/>
    <id>http://zablog.me/2017/08/27/github_hugo/</id>
    <published>2017-08-27T09:30:00.000Z</published>
    <updated>2017-08-27T09:32:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个用Go实现的快速灵活的静态页面生成工具 // A Fast and Flexible Static Site Generator built with love in GoLang.<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>hugo</th>
</tr>
</thead>
<tbody>
<tr>
<td>地址</td>
<td><a href="https://github.com/gohugoio/hugo" target="_blank" rel="external">Github</a></td>
</tr>
<tr>
<td>作者</td>
<td>spf13等</td>
</tr>
<tr>
<td>Brief Intro</td>
<td>A Fast and Flexible Static Site Generator built with love in GoLang.</td>
</tr>
<tr>
<td>LICENSE</td>
<td>Apache 2.0</td>
</tr>
<tr>
<td>starts</td>
<td>19,204</td>
</tr>
</tbody>
</table>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><img src="https://raw.githubusercontent.com/gohugoio/hugoDocs/master/static/img/hugo-logo.png" alt="HUGO"></p>
<p>Hugo 是一个快速灵活的静态页面生成工具。它在速度、易用性和可配置性上进行了优化。Hugo可以把一个包含内容、模板的文件夹渲染为一个完整的HTML网站。</p>
<p>Hugo基于Markdown文件。</p>
<p>Hugo可以在瞬间渲染出一个中等大小的网站。从经验来看，每一片内容的渲染只需要大概1微秒。</p>
<p>Hugo设计之初就是为了服务于博客、tumbles和文档。</p>
<p><a href="http://gohugo.io/" target="_blank" rel="external">官网gohugo.io</a></p>
<h1 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h1><p>hugo和hexo可以说是功能类似。</p>
<p>hexo是离线生成博客网页的工具，由js实现，基于node和npm这一套提醒。可以方便地生成整个博客，渲染markdown，使用theme。</p>
<p>然而，hexo也存在很多问题，第一是生成速度慢。生成速度和theme有很大关系，但是确实比较慢。最艰难的时候，我曾经每次写一篇新的博客，都需要大概10秒钟以上的时间来生成所有的静态页面。后来换了一个theme，更新了hexo，100个页面，加载时间长达1000ms，生成时间大概是231ms。</p>
<p>但是hugo在时间上有很大的优势，每次只需要90ms就解决所有的问题，快了十几倍。</p>
<p>另外，hexo的theme与主hexo的兼容性还有待商榷。有一些主题的兼容性很差，尤其是hexo更新以后，也许就不怎么支持了。</p>
<p>最后也是最重要的，npm的网络实在不敢恭维，很多时候爆出WARN、Error或者直接下载失败，也就真的卡在npm这里了。对于go来说，本身go的包管理，我认为会比npm好用。</p>
<p>当然，hexo我已经用了较长时间了，总体也比较熟练。如果没有使用过hexo，但是想要做一个静态博客的话，我建议使用hugo。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个用Go实现的快速灵活的静态页面生成工具 // A Fast and Flexible Static Site Generator built with love in GoLang.&lt;br&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://zablog.me/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Github Every Week" scheme="http://zablog.me/tags/Github-Every-Week/"/>
    
  </entry>
  
  <entry>
    <title>每周一个Github项目【第三期】go.uuid</title>
    <link href="http://zablog.me/2017/08/18/github_go.uuid/"/>
    <id>http://zablog.me/2017/08/18/github_go.uuid/</id>
    <published>2017-08-18T12:30:00.000Z</published>
    <updated>2017-08-18T14:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>go语言UUID包 // UUID package for Go</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>名称</th>
<th>go.uuid</th>
</tr>
</thead>
<tbody>
<tr>
<td>地址</td>
<td><a href="https://github.com/satori/go.uuid" target="_blank" rel="external">Github</a></td>
</tr>
<tr>
<td>作者</td>
<td>satori等</td>
</tr>
<tr>
<td>brief intro</td>
<td>UUID package for Go</td>
</tr>
<tr>
<td>简要介绍</td>
<td>go语言UUID包</td>
</tr>
<tr>
<td>LICENSE</td>
<td>MIT</td>
</tr>
<tr>
<td>Stars</td>
<td>1304</td>
</tr>
</tbody>
</table>
<h2 id="什么是UUID"><a href="#什么是UUID" class="headerlink" title="什么是UUID"></a>什么是UUID</h2><p>UUID的全称是universally unique identifier，全局唯一认证，它是一个128比特的数字，用来辨认计算机系统中的信息。术语GUID也是这个意思。</p>
<p>UUID的终极目的是“独特性”,它不希望依赖中央注册机构或协调双方之间产生这种独特性,与大多数其他编号计划。虽然UUID将重复的概率不为零，但是它接近于零，因此可以忽略不计。</p>
<p>在命令行，有简单的产生UUID的方法，在Unix/Linux系统中，只要简单的执行uuidgen就可以获得一个新的UUID字符串。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uuidgen</div><div class="line">7d976a86-8414-11e7-8ac3-6c92bf136d47</div></pre></td></tr></table></figure>
<p>UUID是128比特的数字，如果用16进制表示的话，可以表示为一个32位的十六进制数。一般在格式化的时候，格式化为<code>8-4-4-4-12</code>的形式，如</p>
<p><code>123e4567-e89b-12d3-a456-426655440000</code><br><code>xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx</code></p>
<h2 id="为什么要有UUID"><a href="#为什么要有UUID" class="headerlink" title="为什么要有UUID"></a>为什么要有UUID</h2><p>在分布式系统中，因为通信、同步、保持一致性具有很高的成本，所以一些场景下希望不依靠通信就可以生成唯一的身份验证符号。</p>
<h2 id="如何产生UUID"><a href="#如何产生UUID" class="headerlink" title="如何产生UUID"></a>如何产生UUID</h2><p>那么这样一个UUID是如何产生的呢？</p>
<p>中国是一个超大规模的国家，如果每个人生成自己的身份证，都需要到相互协调，那么全国肯定一团糟，如果每个人都到中央注册机构来确定独特性的话，那么中央注册机构肯定被挤爆。那么身份证的生成办法是分配前几位数为地区，分配中间几位为时间，后面三位用于一个区域内确定唯一性，最后一位校验即可。这样就可以相对方便地产生唯一的身份号码了。</p>
<p>同样地，MAC地址和蓝牙地址的确定也是类似的策略，前面的位数是厂商号，后面的位数由厂商内部决定，这样就避免了冲突。</p>
<p>实际上，UUID的国际标准<a href="https://tools.ietf.org/html/rfc4122" target="_blank" rel="external"><strong>RFC 4122</strong></a>定义了5个版本的生成方式。</p>
<h4 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h4><p>根据时间和MAC地址生成。版本1会把48比特的MAC地址和60比特的时间戳串联起来。<br>这个时间戳是从1582年10月15日午夜UTC时间起算起的纳秒数目。<br>按照<code>RFC4122</code>的规定，这个时间可以延续到大概公元3400年。<br>然而，一些软件，譬如libuuid库，把时间戳作为非负数类型使用，在这种方法下可以使用到公元5236年。</p>
<h4 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h4><p>根据时间和MAC地址生成，并使用POSIX UID/GID，DCE安全版本。<br>版本2和版本1很类似，除了最重要的八个时钟序列字节被替换为了本地域的数字，最护重要的32个时间戳被替换为与本地域对应的整形数字。在POSIX系统上，它与UID和GID有关。在非POSIX系统上，就靠系统自己定义了。</p>
<h4 id="版本3"><a href="#版本3" class="headerlink" title="版本3"></a>版本3</h4><p>哈希命名空间和名字，使用MD5作为哈希算法。<br>版本3的生成方法是哈希命名空间的标识符和名字。命名空间标识符本身就是一个UUID，该规格提供UUID来标识URL的命名空间等作用。</p>
<h4 id="版本4"><a href="#版本4" class="headerlink" title="版本4"></a>版本4</h4><p>随机生成。<br>忘了说，上述所有版本生成的UUID都有字段来规定自己的版本。所以并非128比特都是可以任意使用的。<br>对于随机生成的版本4UUID，理论上有2<sup>122</sup>, 或者说5.3x10<sup>36</sup>种可能性。</p>
<h4 id="版本5"><a href="#版本5" class="headerlink" title="版本5"></a>版本5</h4><p>哈希命名空间和名字，使用SHA1作为哈希算法。和版本3特别类似。因为SHA1算法产生的字串是160bit，比MD5长，所以强行缩短为128位再插入。</p>
<h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><p>在版本1或者2中，因为是和独一无二的MAC地址相关的，所以只要MAC地址不冲突，则UUID不可能冲突。当然MAC地址是可以伪造的，那个时候冲突就不在我们的讨论范围了。</p>
<p>但是其他版本的是有可能产生冲突的。譬如版本4，完全依靠随机性来产生，两个UUID一模一样是存在理论可能的。<br>然而，因为位数较多，所以这个可能性极低。<br>经过计算，产生的2.71x10<sup>18</sup>个UUID，有50%的概率会拥有至少一个冲突。</p>
<p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d5e4534ec6aac67d0d084e7aa8e431d2baed988e" alt="UUID冲突公式"></p>
<p>这概率可以说实在是太低了，一般应用场景不会有这种问题。</p>
<h2 id="go-uuid"><a href="#go-uuid" class="headerlink" title="go.uuid"></a>go.uuid</h2><p>最后来讲解一下这个库的用法。这个库相对比较优势的地方就是它实现了<code>RFC4122</code>规定的所有版本，虽然并没有很难哈哈。<br>使用样例很简单，这里是版本4，也是最简单的用法：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"github.com/satori/go.uuid"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// Creating UUID Version 4</span></div><div class="line">	u1 := uuid.NewV4()</div><div class="line">	fmt.Printf(<span class="string">"UUIDv4: %s\n"</span>, u1)</div><div class="line"></div><div class="line">	<span class="comment">// Parsing UUID from string input</span></div><div class="line">	u2, err := uuid.FromString(<span class="string">"6ba7b810-9dad-11d1-80b4-00c04fd430c8"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		fmt.Printf(<span class="string">"Something gone wrong: %s"</span>, err)</div><div class="line">	&#125;</div><div class="line">	fmt.Printf(<span class="string">"Successfully parsed: %s"</span>, u2)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考文献：</p>
<ul>
<li><a href="https://github.com/Knetic/govaluate" target="_blank" rel="external">https://github.com/Knetic/govaluate</a></li>
<li><a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="external">UUID-Wikipedia</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;go语言UUID包 // UUID package for Go&lt;/p&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://zablog.me/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Github Every Week" scheme="http://zablog.me/tags/Github-Every-Week/"/>
    
  </entry>
  
  <entry>
    <title>每周一个Github项目【第二期】govaluate</title>
    <link href="http://zablog.me/2017/08/13/github_govaluate/"/>
    <id>http://zablog.me/2017/08/13/github_govaluate/</id>
    <published>2017-08-13T12:30:00.000Z</published>
    <updated>2017-08-15T03:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>golang环境下任意表达式的求值 // Arbitrary expression evaluation for golang</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>名称</th>
<th>govaluate</th>
</tr>
</thead>
<tbody>
<tr>
<td>地址</td>
<td><a href="https://github.com/Knetic/govaluate" target="_blank" rel="external">Github</a></td>
</tr>
<tr>
<td>作者</td>
<td>Knetic等</td>
</tr>
<tr>
<td>brief intro</td>
<td>Arbitrary expression evaluation for golang</td>
</tr>
<tr>
<td>简要介绍</td>
<td>golang环境下任意表达式的求值</td>
</tr>
<tr>
<td>LICENSE</td>
<td>MIT</td>
</tr>
<tr>
<td>Stars</td>
<td>245</td>
</tr>
</tbody>
</table>
<p>govaluate提供了任意类似C语言的算术/字符串表达式的求值。</p>
<h2 id="为什么你不应该直接在代码中书写表达式"><a href="#为什么你不应该直接在代码中书写表达式" class="headerlink" title="为什么你不应该直接在代码中书写表达式"></a>为什么你不应该直接在代码中书写表达式</h2><p>有些时候，你并没有办法提前得知表达式的样子，或者你希望表达式可设置。如果你有一堆运行在你的应用上的数据，或者你想要允许你的用户自定义一些内容，或者你写的是一个监控框架，可以获得很多metrics信息，然后进行一些公式计算，那么这个库就会非常有用。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>可以创建一个新的EvaluableExpression，然后调用它的”Evaluate”方法。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   expression, err := govaluate.NewEvaluableExpression(<span class="string">"10 &gt; 0"</span>);</div><div class="line">result, err := expression.Evaluate(<span class="literal">nil</span>);</div><div class="line"><span class="comment">// result is now set to "true", the bool value.</span></div></pre></td></tr></table></figure>
<p>那么，如何使用参数？</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">expression, err := govaluate.NewEvaluableExpression(<span class="string">"foo &gt; 0"</span>);</div><div class="line"></div><div class="line">parameters := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">8</span>)</div><div class="line">parameters[<span class="string">"foo"</span>] = <span class="number">-1</span>;</div><div class="line"></div><div class="line">result, err := expression.Evaluate(parameters);</div><div class="line"><span class="comment">// result is now set to "false", the bool value.</span></div></pre></td></tr></table></figure>
<p>这很棒，但是这些基本上可以使用代码直接实现。那么如果计算中牵扯到一些数学计算呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">expression, err := govaluate.NewEvaluableExpression(&quot;(requests_made * requests_succeeded / 100) &gt;= 90&quot;);</div><div class="line"></div><div class="line">parameters := make(map[string]interface&#123;&#125;, 8)</div><div class="line">parameters[&quot;requests_made&quot;] = 100;</div><div class="line">parameters[&quot;requests_succeeded&quot;] = 80;</div><div class="line"></div><div class="line">result, err := expression.Evaluate(parameters);</div><div class="line">// result is now set to &quot;false&quot;, the bool value.</div></pre></td></tr></table></figure>
<p>上述例子返回的都是布尔值，事实上，它是可以返回数字的。</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">expression, err := govaluate.NewEvaluableExpression(<span class="string">"(mem_used / total_mem) * 100"</span>);</div><div class="line"></div><div class="line">parameters := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">8</span>)</div><div class="line">parameters[<span class="string">"total_mem"</span>] = <span class="number">1024</span>;</div><div class="line">parameters[<span class="string">"mem_used"</span>] = <span class="number">512</span>;</div><div class="line"></div><div class="line">result, err := expression.Evaluate(parameters);</div><div class="line"><span class="comment">// result is now set to "50.0", the float64 value.</span></div></pre></td></tr></table></figure>
<p>你也可以做一些日期的转化，只要符合RF3339,ISO8061,Unix Date，或者ruby日期格式标准即可。如果你还是不太确定，那么可以看一下支持的<a href="https://github.com/Knetic/govaluate/blob/0580e9b47a69125afa0e4ebd1cf93c49eb5a43ec/parsing.go#L258" target="_blank" rel="external">日期标准</a>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   expression, err := govaluate.NewEvaluableExpression(<span class="string">"'2014-01-02' &gt; '2014-01-01 23:59:59'"</span>);</div><div class="line">result, err := expression.Evaluate(<span class="literal">nil</span>);</div><div class="line"></div><div class="line"><span class="comment">// result is now set to true</span></div></pre></td></tr></table></figure>
<p>表达式只需要进行一次句法分析，就可以多次复用。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   expression, err := govaluate.NewEvaluableExpression(<span class="string">"response_time &lt;= 100"</span>);</div><div class="line">parameters := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">8</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">	parameters[<span class="string">"response_time"</span>] = pingSomething();</div><div class="line">	result, err := expression.Evaluate(parameters)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于执行顺序，本库支持正常C标准的执行顺序。编写表达式时，请确保您正确地书写操作符，或使用括号来明确表达式的哪些部分应先运行。</p>
<p>govaluate采用\或者[]来完成转义。</p>
<p>支持自定义函数</p>
<p>支持简单的结构体（访问器）</p>
<h2 id="运算符支持"><a href="#运算符支持" class="headerlink" title="运算符支持"></a>运算符支持</h2><p>ruleplatform的表达式引擎支持以下运算：<br>二元计算符 : + - / <em> &amp; | ^ *</em> % &gt;&gt; &lt;&lt;<br>二元比较符 : &gt; &gt;= &lt; &lt;= == != =~ !~<br>逻辑操作符 : || &amp;&amp;<br>括号 : ( )<br>数组相关 : , IN (例子1 IN (1, 2, ‘foo’)，返回值true)<br>一元计算符 : ! - ~<br>三元运算符 : ? :<br>空值聚合符: ??</p>
<p>更多内容请查看<a href="https://github.com/Knetic/govaluate" target="_blank" rel="external">https://github.com/Knetic/govaluate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;golang环境下任意表达式的求值 // Arbitrary expression evaluation for golang&lt;/p&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://zablog.me/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Github Every Week" scheme="http://zablog.me/tags/Github-Every-Week/"/>
    
  </entry>
  
  <entry>
    <title>每周一个Github项目【第一期】onionscan</title>
    <link href="http://zablog.me/2017/08/04/github_onion_scan/"/>
    <id>http://zablog.me/2017/08/04/github_onion_scan/</id>
    <published>2017-08-04T12:30:00.000Z</published>
    <updated>2017-08-15T03:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个用于探查深网的免费开源工具 // A free and open source tool for investigating the Dark Web<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>OnionScan</th>
</tr>
</thead>
<tbody>
<tr>
<td>地址</td>
<td><a href="https://github.com/s-rah/onionscan" target="_blank" rel="external">Github</a></td>
</tr>
<tr>
<td>作者</td>
<td>s-rah等</td>
</tr>
<tr>
<td>Brief Intro</td>
<td>OnionScan is a free and open source tool for investigating the Dark Web.</td>
</tr>
<tr>
<td>LICENSE</td>
<td>MIT</td>
</tr>
<tr>
<td>starts</td>
<td>912</td>
</tr>
</tbody>
</table>
<p>所以这个东西叫做扫描洋葱呗。</p>
<blockquote>
<p>OnionScan是一个用于探查深网（Dark Web）的免费开源工具。对于匿名和隐私空间的所有惊人的技术创新，总是有一个不断的威胁，没有有效的技术补丁，那就是人为错误。</p>
<p>无论是操作安全漏洞还是软件配置错误 - 最常见的是匿名攻击不是来自于破坏底层系统，而是来自于我们自己。</p>
<p>OnionScan有两个主要目标：</p>
<p>希望帮助隐藏服务的运营者找到并修复其服务的操作安全问题。希望帮助他们检测配置错误，希望启发新一代匿名工程项目，保护人们的隐私。</p>
<p>其次，OnionScan希望帮助研究人员和调查人员监控和跟踪黑网站。当然OnionScan并不一定同意调查者的动机，但通过使调查变得容易，希望为新的匿名技术创造一个强大的激励（见目标1）</p>
</blockquote>
<p>OnionScan这个工具的探测能力很强，但是作为一个爬虫类的应用，首先需要一个proxy。该工程使用的是tor proxy，这个我在测试的时候还没有搞定，所以具体实际测试也就没进行。具体作用、效果待研究。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个用于探查深网的免费开源工具 // A free and open source tool for investigating the Dark Web&lt;br&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://zablog.me/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Github Every Week" scheme="http://zablog.me/tags/Github-Every-Week/"/>
    
  </entry>
  
  <entry>
    <title>网络实用工具</title>
    <link href="http://zablog.me/2017/05/26/network_utility/"/>
    <id>http://zablog.me/2017/05/26/network_utility/</id>
    <published>2017-05-26T06:48:06.000Z</published>
    <updated>2017-08-15T03:06:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac OS X 中超方便的网络小工具<br><a id="more"></a></p>
<p>早在互联网的早期，事情并不如现在那么稳定，所以系统管理员创建了一套工具来帮助解决问题。许多老板都记得在命令行中键入ping命令后面跟着一个IP地址的“乐趣”，然后等待看是否有响应。</p>
<p>同样地，traceroute总是有助于找出机器之间通信的计算机，路由器和服务器之间的长链反弹的哪里。 苹果把所有这些有用的工具放在一个名为“网络实用工具”的应用程序中。</p>
<p>旧版本的Mac可以在Applications文件夹的Utilities文件夹中找到网络实用工具，在 OS X Mavericks 和更高版本中，“网络实用工具”位于“/系统/资源库/CoreServices/Applications”中。当然，也可以用spotlight直接搜索“网络实用工具”，更可以丧心病狂地对Siri说“启动网络实用程序”，应用程序立即在您的屏幕上。每个Mac都可以免费使用，并可以很好地解决互联网连接的问题。<br>您可以在网络实用工具中做的一切事情，当然也可以使用unix工具在终端窗口中实际执行此操作。但是，苹果创建了一个很好的应用程序，让我们可以更轻松地使用这些内容。</p>
<p>当您首次打开网络实用程序时，可以看到顶部有9个选项卡。</p>
<p>先做对这些功能的简要介绍（官方）<a href="https://support.apple.com/en-us/HT202790" target="_blank" rel="external">ref</a></p>
<h2 id="功能列表："><a href="#功能列表：" class="headerlink" title="功能列表："></a>功能列表：</h2><ul>
<li>Netstat：通过查看使用常用网络协议发送和接收的数据包类型的详细摘要，来检查您电脑的网络路由表。</li>
<li>Ping：测试您的电脑是否可与位于特定网络地址处的电脑或其他设备进行通信。</li>
<li>Lookup：查看由您的域名系统 (DNS) 服务器提供的信息。</li>
<li>Traceroute：跟踪信息在网络中的电脑之间传输时所采用的路径。</li>
<li>Whois：输入一个域地址，以从 whois 服务器中查找其“whois”信息。</li>
<li>Finger：输入一个用户名和域地址，以使用 Finger 协议来获取有关用户的信息。</li>
<li>端口扫描：输入一个互联网或 IP 地址来扫描打开的端口。</li>
</ul>
<p><img src="https://blog.macsales.com/wp-content/uploads/2016/10/NetworkUtility-1.png" alt="Info"></p>
<h2 id="Info-信息"><a href="#Info-信息" class="headerlink" title="Info 信息"></a>Info 信息</h2><p>信息（见上图）提供了一个下拉菜单，其中列出了Mac内置的每个网络接口。 例如，它显示了显示 Wi-Fi（en0），Thunderbolt 1（en1）和Thunderbolt 13（en2）。 选择任何一个网络接口提供了丰富的信息，包括硬件地址（MAC - 媒体访问控制地址，分配给每个网络接口的唯一编号），IP地址（IPv4），链路速度，链路状态，供应商和模型。</p>
<p>信息屏幕的右侧还显示自Mac上次重新启动以来接口发送或接收的数据包数量。如果可以看到一些错误或冲突，那么丢弃数据包的可能性很小。这通常表现为与网站缓慢的连接，缓慢的下载等。</p>
<h2 id="Netstat"><a href="#Netstat" class="headerlink" title="Netstat"></a>Netstat</h2><p>对于不是网络管理员的大多数Mac用户，Netstat有点深奥。 它提供了一种通过显示使用常用网络协议（TCP，UDP，IP，ICMP，IGMP，IPSEC，IP6，ICMP6，IPSEC6和PFKEY）发送和接收的数据包类型的摘要，来检查您的Mac网络路由表的方法。<br><img src="https://blog.macsales.com/wp-content/uploads/2016/10/NetworkUtility-2-e1475853654240.png" alt="Netstat"></p>
<h2 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h2><p>网络实用程序中可能使用最广泛和最有用的工具可能是ping。 它用于查看您的Mac是否可以与具有已知网络地址的另一个设备通信 - 否则称为“ping”其他设备。例如，如果我在我的iMac（本地网络IP地址10.0.1.6），我想知道我是否可以到达我的AirPort Extreme路由器（本地网络IP地址10.0.1.1），我键入我希望ping的地址 进入网络实用程序的Ping窗格中的字段，然后单击Ping按钮。<br><img src="https://blog.macsales.com/wp-content/uploads/2016/10/NetworkUtility-3.png" alt="ping"></p>
<p>默认情况下，ping向另一台设备发送10个数据包，测量iMac上每次ping接收的时间。 如果响应显示任何或所有ping返回超时，则表示Mac与路由器之间的连接不正确，并且我可以开始解决具有该知识的问题。</p>
<h2 id="Lookup"><a href="#Lookup" class="headerlink" title="Lookup"></a>Lookup</h2><p>如果不是域名系统（DNS）服务器，我们都可以在我们的网络浏览器中输入数字地址以访问网站。 DNS将Web地址（如blog.macsales.com）转换为IP地址，以便我们的计算机可以与Web服务器进行会话。 有时您可能会输入网址，并从网页浏览器中找到“服务器未找到”错误。 这通常表示您错误地输入了地址（如“blurg.macsales.com”），DNS服务器可能存在问题，或DNS服务器地址（在“网络参考”中输入）可能不正确。</p>
<p>Lookup实际上包含两个基本命令 - nslookup和dig。 键入网站的字母数字名称 - 例如“apple.com”，然后单击查找按钮显示与该域名相关联的IP地址，而输入IP地址则显示与该地址相关联的域。 奇怪的是，输入“apple.com”显示的IP地址将“applecentre.info”，“AirTunes.info”和“carbondating.com”作为三个可能的域返回。 前两个地址带你到“apple.com”网站，而第三个地址被遗忘。 我猜？ 苹果公司使用这些奇怪的域名作为抵御对该公司的分布式拒绝服务攻击的一种方式。</p>
<p><img src="https://blog.macsales.com/wp-content/uploads/2016/10/NetworkUtility-4.png" alt="lookup"></p>
<h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><p>网络实用程序中最有用的工具之一是traceroute，它正是这个名称所暗示的 - 它跟踪Mac和另一台机器之间的路由。 看看从本电脑traceroute到美国专利商标局（uspto.gov）会发生什么。</p>
<p><img src="https://blog.macsales.com/wp-content/uploads/2016/10/NetworkUtility-5.png" alt="traceroute"></p>
<p>事情从我的本地网络（10.0.1.1是我的AirPort Extreme Wi-Fi路由器）开始，然后通过各种Comcast系统到达得克萨斯州的达拉斯地区，然后离开ATT网络上的华盛顿特区（wswdc）。 Traceroute在播放Mac和网络服务器之间可以播放一个野蛮的数据包时很有趣。</p>
<h2 id="Whois"><a href="#Whois" class="headerlink" title="Whois"></a>Whois</h2><p>想知道域名背后的实体？ 这就是Whois的一切。 虽然许多组织现在购买域名注册信息的隐私，但仍然可以找到网站使用的域名注册商。 如果您从特定的电子邮件地址收到垃圾邮件并希望向域名注册商投诉，这可能非常有用。</p>
<h2 id="Finger"><a href="#Finger" class="headerlink" title="Finger"></a>Finger</h2><p>Finger创建于1971年，是现在使用微博、QQ完成状态更新的最早形式之一。你可以使用Finger来检查你的朋友是否在线，你可以发布.plan文件到您的个人资料类似博客帖子。</p>
<p>使用Finger的最佳方式之一是在Mac上输入您的用户名或其他用户的用户名。它会告诉你他们/你当前是否登录，以及他们/你上次登录的时间长短。可以把Finger视为独立个体的whois。</p>
<p>幸运的是，现在它已经几乎无法正常工作，它曾经在互联网的原始日子里辉煌过。如今，用户名和域名地址的手指很可能会超时。这对于隐私保护来说是一件好事，而且在这个社交网络已经极其发达的时候，Finger说实在的已经没有什么意义了。</p>
<h2 id="Port-Scan"><a href="#Port-Scan" class="headerlink" title="Port Scan"></a>Port Scan</h2><p>网络实用程序窗口中的最后一个选项卡是端口扫描，可用于确定特定计算机上各种Internet协议端口的状态。 当您的Mac被分配一个特定的IP地址时，它使用的各种服务，包括电子邮件，网页浏览等，都被分配一个TCP或UDP端口号。</p>
<p>在一个非常安全的世界中，在一个非常安全的Mac上，所有的端口将被关闭 - 这就是防火墙的目的，它作为特定端口的网守，只允许特定流量通过该端口进入。 但是你会发现一些端口是开放的 - 在这次扫描中，我关闭了Mac的内置防火墙（在“系统偏好设置”&gt;防火墙中找到），并发现许多端口都是打开的：<br><img src="https://blog.macsales.com/wp-content/uploads/2016/10/NetworkUtility-6.png" alt="Port Scan"><br>要查看特定端口的使用情况，以下是完整列表。 我发现一些端口（445和4502）用于Windows共享和Silverlight; 将Mac的防火墙重新启动没有关闭这些端口，这显然是我在这台机器上使用的一些应用程序所需要的。</p>
<hr>

<p>所以，你现在已经学会这个工具啦。它在网络问题解决方面真的是太方便了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac OS X 中超方便的网络小工具&lt;br&gt;
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="OS X" scheme="http://zablog.me/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>多线程的内存排布</title>
    <link href="http://zablog.me/2016/12/26/multithreading_memory/"/>
    <id>http://zablog.me/2016/12/26/multithreading_memory/</id>
    <published>2016-12-26T04:46:23.000Z</published>
    <updated>2016-12-26T03:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>写了一小段python代码来测试Linux对于多线程的内存排布。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, t_name)</span>:</span></div><div class="line">        threading.Thread.__init__(self, name=t_name)</div><div class="line">        self.name = t_name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"%s Runs"</span> % self.name</div><div class="line">        <span class="comment"># sleep for 1 minutes.</span></div><div class="line">        time.sleep(<span class="number">60</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    t1 = T(<span class="string">"t1"</span>)</div><div class="line">    t2 = T(<span class="string">"t2"</span>)</div><div class="line">    t3 = T(<span class="string">"t3"</span>)</div><div class="line">    t1.start()</div><div class="line">    t2.start()</div><div class="line">    t3.start()</div><div class="line">    t1.join()</div><div class="line">    t2.join()</div><div class="line">    t3.join()</div><div class="line">    <span class="keyword">print</span> <span class="string">"T1 &amp; T2 reaped."</span></div></pre></td></tr></table></figure>
<p>查看一下maps文件，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$cat</span> /proc/.../maps</div></pre></td></tr></table></figure>
<p>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">zachary@LABCAT:/mnt/c/Projects/test$ cat /proc/309/maps</div><div class="line">00400000-006bc000 r-x- 00000000 00:00 249355                     /usr/bin/python2.7</div><div class="line">008bb000-008bc000 r--- 002bb000 00:00 249355                     /usr/bin/python2.7</div><div class="line">008bc000-00931000 rw-- 002bc000 00:00 249355                     /usr/bin/python2.7</div><div class="line">00931000-00943000 rw-- 00000000 00:00 0</div><div class="line">020cb000-0219c000 rw-- 00000000 00:00 0                          [heap]</div><div class="line">7f0a4c000000-7f0a4c021000 rw-- 00000000 00:00 0</div><div class="line">7f0a4c021000-7f0a50000000 ---- 00000000 00:00 0</div><div class="line">7f0a50000000-7f0a50021000 rw-- 00000000 00:00 0</div><div class="line">7f0a50021000-7f0a54000000 ---- 00000000 00:00 0</div><div class="line">7f0a54000000-7f0a54021000 rw-- 00000000 00:00 0</div><div class="line">7f0a54021000-7f0a58000000 ---- 00000000 00:00 0</div><div class="line">7f0a58910000-7f0a58911000 ---- 00000000 00:00 0</div><div class="line">7f0a58911000-7f0a59111000 rw-- 00000000 00:00 0</div><div class="line">7f0a59120000-7f0a59121000 ---- 00000000 00:00 0</div><div class="line">7f0a59121000-7f0a59921000 rw-- 00000000 00:00 0</div><div class="line">7f0a59930000-7f0a59931000 ---- 00000000 00:00 0</div><div class="line">7f0a59931000-7f0a5a131000 rw-- 00000000 00:00 0</div><div class="line">7f0a5a137000-7f0a5a2c0000 r--- 00000000 00:00 119790             /usr/lib/locale/locale-archive</div><div class="line">7f0a5a2c0000-7f0a5a3c5000 r-x- 00000000 00:00 34505              /lib/x86_64-linux-gnu/libm-2.19.so</div><div class="line">7f0a5a3c5000-7f0a5a3c6000 ---- 00105000 00:00 34505              /lib/x86_64-linux-gnu/libm-2.19.so</div><div class="line">7f0a5a3c6000-7f0a5a5c4000 ---- 00000000 00:00 0</div><div class="line">7f0a5a5c4000-7f0a5a5c5000 r--- 00104000 00:00 34505              /lib/x86_64-linux-gnu/libm-2.19.so</div><div class="line">7f0a5a5c5000-7f0a5a5c6000 rw-- 00105000 00:00 34505              /lib/x86_64-linux-gnu/libm-2.19.so</div><div class="line">7f0a5a5d0000-7f0a5a5e8000 r-x- 00000000 00:00 34714              /lib/x86_64-linux-gnu/libz.so.1.2.8</div><div class="line">7f0a5a5e8000-7f0a5a5e9000 ---- 00018000 00:00 34714              /lib/x86_64-linux-gnu/libz.so.1.2.8</div><div class="line">7f0a5a5e9000-7f0a5a7e7000 ---- 00000000 00:00 0</div><div class="line">7f0a5a7e7000-7f0a5a7e8000 r--- 00017000 00:00 34714              /lib/x86_64-linux-gnu/libz.so.1.2.8</div><div class="line">7f0a5a7e8000-7f0a5a7e9000 rw-- 00018000 00:00 34714              /lib/x86_64-linux-gnu/libz.so.1.2.8</div><div class="line">7f0a5a7f0000-7f0a5a7f2000 r-x- 00000000 00:00 34384              /lib/x86_64-linux-gnu/libutil-2.19.so</div><div class="line">7f0a5a7f2000-7f0a5a7f3000 ---- 00002000 00:00 34384              /lib/x86_64-linux-gnu/libutil-2.19.so</div><div class="line">7f0a5a7f3000-7f0a5a9f1000 ---- 00000000 00:00 0</div><div class="line">7f0a5a9f1000-7f0a5a9f2000 r--- 00001000 00:00 34384              /lib/x86_64-linux-gnu/libutil-2.19.so</div><div class="line">7f0a5a9f2000-7f0a5a9f3000 rw-- 00002000 00:00 34384              /lib/x86_64-linux-gnu/libutil-2.19.so</div><div class="line">7f0a5aa00000-7f0a5aa03000 r-x- 00000000 00:00 34478              /lib/x86_64-linux-gnu/libdl-2.19.so</div><div class="line">7f0a5aa03000-7f0a5aa04000 ---- 00003000 00:00 34478              /lib/x86_64-linux-gnu/libdl-2.19.so</div><div class="line">7f0a5aa04000-7f0a5ac02000 ---- 00000000 00:00 0</div><div class="line">7f0a5ac02000-7f0a5ac03000 r--- 00002000 00:00 34478              /lib/x86_64-linux-gnu/libdl-2.19.so</div><div class="line">7f0a5ac03000-7f0a5ac04000 rw-- 00003000 00:00 34478              /lib/x86_64-linux-gnu/libdl-2.19.so</div><div class="line">7f0a5ac10000-7f0a5adca000 r-x- 00000000 00:00 34759              /lib/x86_64-linux-gnu/libc-2.19.so</div><div class="line">7f0a5adca000-7f0a5add2000 ---- 001ba000 00:00 34759              /lib/x86_64-linux-gnu/libc-2.19.so</div><div class="line">7f0a5add2000-7f0a5afca000 ---- 00000000 00:00 0</div><div class="line">7f0a5afca000-7f0a5afce000 r--- 001ba000 00:00 34759              /lib/x86_64-linux-gnu/libc-2.19.so</div><div class="line">7f0a5afce000-7f0a5afd0000 rw-- 001be000 00:00 34759              /lib/x86_64-linux-gnu/libc-2.19.so</div><div class="line">7f0a5afd0000-7f0a5afd5000 rw-- 00000000 00:00 0</div><div class="line">7f0a5afe0000-7f0a5aff9000 r-x- 00000000 00:00 34736              /lib/x86_64-linux-gnu/libpthread-2.19.so</div><div class="line">7f0a5aff9000-7f0a5b003000 ---- 00019000 00:00 34736              /lib/x86_64-linux-gnu/libpthread-2.19.so</div><div class="line">7f0a5b003000-7f0a5b1f8000 ---- 00000000 00:00 0</div><div class="line">7f0a5b1f8000-7f0a5b1f9000 r--- 00018000 00:00 34736              /lib/x86_64-linux-gnu/libpthread-2.19.so</div><div class="line">7f0a5b1f9000-7f0a5b1fa000 rw-- 00019000 00:00 34736              /lib/x86_64-linux-gnu/libpthread-2.19.so</div><div class="line">7f0a5b1fa000-7f0a5b1fe000 rw-- 00000000 00:00 0</div><div class="line">7f0a5b200000-7f0a5b223000 r-x- 00000000 00:00 34451              /lib/x86_64-linux-gnu/ld-2.19.so</div><div class="line">7f0a5b2e0000-7f0a5b3d1000 rw-- 00000000 00:00 0</div><div class="line">7f0a5b3e0000-7f0a5b421000 rw-- 00000000 00:00 0</div><div class="line">7f0a5b422000-7f0a5b423000 r--- 00022000 00:00 34451              /lib/x86_64-linux-gnu/ld-2.19.so</div><div class="line">7f0a5b423000-7f0a5b424000 rw-- 00023000 00:00 34451              /lib/x86_64-linux-gnu/ld-2.19.so</div><div class="line">7f0a5b424000-7f0a5b425000 rw-- 00000000 00:00 0</div><div class="line">7f0a5b430000-7f0a5b4b2000 rw-- 00000000 00:00 0</div><div class="line">7f0a5b4c0000-7f0a5b4c1000 rw-- 00000000 00:00 0</div><div class="line">7f0a5b4d0000-7f0a5b4d1000 rw-- 00000000 00:00 0</div><div class="line">7f0a5b4e0000-7f0a5b4e1000 rw-- 00000000 00:00 0</div><div class="line">7f0a5b4f0000-7f0a5b4f2000 rw-- 00000000 00:00 0</div><div class="line">7ffff2573000-7ffff2d73000 rw-- 00000000 00:00 0                  [stack]</div><div class="line">7ffff2f6b000-7ffff2f6c000 r-x- 00000000 00:00 0                  [vdso]</div></pre></td></tr></table></figure></p>
<p>每一个子线程的stack都是放在一起的，而且默认分配好了一块比较大的空间。<br>当然，用python来测试这个内容是不太合理的，最好还是用C来测试。推荐看一下参考内容1。</p>
<p>由上面的内容可以推断出大致的虚存结构：<br><img src="http://imglf0.nosdn.127.net/img/MGpGUW9CdGlzcDd1cm1TOXdxeWIwWGpxSHFVb0RIdUd2NnBndGRVMElhTnRmYXVkaG1Ca253PT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt="图片"></p>
<p>参考内容：</p>
<ul>
<li><a href="http://blog.csdn.net/high_high/article/details/7204097" target="_blank" rel="external">参考内容1_多线程程序在内存中的分布</a></li>
<li><a href="http://stackoverflow.com/questions/18149218/the-memory-layout-of-a-multithreaded-process" target="_blank" rel="external">参考内容2_StackOverflow</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写了一小段python代码来测试Linux对于多线程的内存排布。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cl
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Linux" scheme="http://zablog.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Web3.0的定义</title>
    <link href="http://zablog.me/2016/12/05/Web3.0/"/>
    <id>http://zablog.me/2016/12/05/Web3.0/</id>
    <published>2016-12-05T06:44:52.000Z</published>
    <updated>2016-12-07T11:47:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>上学期当助教讲到Web章节总结的一点点极为浅显的基础知识。</p>
<p>Web1.0注重于信息的单向发布，像一个权威不容修改。</p>
<p>Web2.0使得用户既是内容的浏览者，又是内容的发布者，更加注重交互性。</p>
<p>Web3.0的信息可以通过第三方信息平台对多家网站的信息进行整合使用。</p>
<p>HTML5是对HTML的第五次重大修改，它的本质是一套标准（HTML5不是一个程序，新版的Chrome、Edge、Firefox、Safari等浏览器，都可以认为是对同一套标准的不同实现）。它更注重移动端的体验，使得各种服务无缝连接。</p>
<p>我总结了几个重点新特性：</p>
<ol>
<li><p>新增语义标签，使得语义更丰富（以前各种苍白的div，现在可以用header、rooter做标签）</p>
</li>
<li><p>本地缓存带来更快的联网速度，还有更有效的服务器推送技术。</p>
</li>
<li><p>更广泛的接口带来更好的设备兼容性（譬如通过Geolocation这种API，开发者可以申请获得用户位置。这也是手机网页版可以在订餐、查地图、租车的时候瞬间确定用户位置的原因。）</p>
</li>
<li><p>更好的网络多媒体特性（网上看视频的时候使用HTML5技术代替原始的Flash，可以更快、能耗更低、安全性更高）</p>
</li>
<li><p>三维图形以及特效特性（SVG、Canvas、WebGL以及CSS3带来惊艳的显示效果）</p>
</li>
</ol>
<p>Cgi可以用不同的语言实现，最常用的是使用perl实现，也可以采用C\C++实现。本节课展示的就是使用C实现CGI的一个例子。</p>
<p>为什么讲CGI，因为在CGI之前，网页都是静态的，CGI开创的动态网页的先河。不过现在CGI也渐渐过时，很难完成大型平台的开发，也很难完成小型平台的快速开发。</p>
<p>CGI FastCGI ASP PHP ColdFusion JSP ASP.NET 等都是常用的主流的动态网页技术。</p>
<p>发展过程中，有一个特性是MVC。MVC是一种软件设计的模式，把模型model-视图-view-控制器-controller分离开。</p>
<p>传统的CGI可以说是把模型、视图、控制器混在一起，靠开发者自己区分，逻辑会比较乱，影响开发效率，MVC出现以后越来越受到开发者的欢迎，也经常被现代Web技术所使用。</p>
]]></content>
    
    <summary type="html">
    
      Web1.0注重于信息的单向发布，像一个权威不容修改。Web2.0使得用户既是内容的浏览者，又是内容的发布者，更加注重交互性。Web3.0的信息可以通过第三方信息平台对多家网站的信息进行整合使用。
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>基于移动传感数据的差分隐私</title>
    <link href="http://zablog.me/2016/10/03/DP/"/>
    <id>http://zablog.me/2016/10/03/DP/</id>
    <published>2016-10-03T03:22:52.000Z</published>
    <updated>2016-10-03T02:51:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>差分隐私（<a href="https://en.wikipedia.org/wiki/Differential_privacy" target="_blank" rel="external">Differential Privacy</a>）的概念已经出现了大概10年了。在密码学中，差分隐私的目的是提供一个机制来最大化统计上查询的准确性，同时最小化识别其个别记录的机会。</p>
<p>差分隐私概念的产生还是要从十年前Netflix举办的机器学习大赛说起。Netflix放出了用户的数据给参赛者，希望参赛者可以给出一个更好的推荐算法。虽然Netflix已经隐去了用户ID、Name等可以直接辨识用户身份的信息，但是还是有人通过匹配网上的数据，找到了大批数据所对应的个人，这相当于让这些数据所对应的隐私直接泄露。</p>
<p>因此就出现了差分隐私的方法。推荐一个优秀的网站 <a href="https://beta.dataverse.org/custom/DifferentialPrivacyPrototype/" target="_blank" rel="external">Privacy Tools</a>。</p>
<p>苹果的WWDC2016用了一个session来讲解差分隐私的概念，并且宣称要开始大规模使用这一技术来统计用户的信息。这也是这项技术产生十年以来第一次大规模地投入业界。</p>
<p>但是对于移动传感数据来说，并不是所有的数据都能直接使用这个技术。</p>
<ol>
<li>传感器数据经常会遵循某一种模式，例如心跳速度是一定位于一个可能区间内的。</li>
<li>传感器数据通常会相互联系。比如加速度传感器数据很高的时候，螺旋仪检测的速度一般也会上升，而且心率、体温一般都会有所升高。</li>
</ol>
<p>因此，简单地使用噪声的增加是不够合理的。当数据进入不太可信的空间的时候，作为黑客可以尽可能地把不合理的数据隐去，力图找到合理的数据，有很大的可能性进行反推。同时，当多个变量相关联的时候，又进一步增大了这种反推的能力。</p>
<p>因此，如果让移动传感器的数据也使用差分隐私的技术安全地释放出去。必须首先判定用户所处的状态，然后对于这个状态进行差分隐私加噪声，最后再还原出来一个虚拟的raw数据，最终把这个数据释放，才能够达到良好的效果。</p>
]]></content>
    
    <summary type="html">
    
      差分隐私的概念已经出现了大概10年了。在密码学中，差分隐私的目的是提供一个机制来最大化统计上查询的准确性，同时最小化识别其个别记录的机会。但是对于移动传感数据来说，并不是所有的数据都能直接使用这个技术。
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="DP" scheme="http://zablog.me/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>专利：一个基于应用程序编程接口的安卓重打包应用检测方法</title>
    <link href="http://zablog.me/2016/09/20/patent/"/>
    <id>http://zablog.me/2016/09/20/patent/</id>
    <published>2016-09-20T14:22:08.000Z</published>
    <updated>2017-08-15T02:56:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>适用于检测安卓平台的应用程序的一种安卓重打包应用检测方法<br><a id="more"></a></p>
<p>今天惊闻三年前申请的专利终于批准下来了，实在是让人高兴。</p>
<ul>
<li>专利类型：发明专利</li>
<li>申请（专利）号：CN201310438647.8</li>
<li>申请日期：2013年9月24日</li>
<li>公开(公告)日：2013年12月25日</li>
<li>公开(公告)号：CN103473346A</li>
<li>申请（专利权）人：北京大学</li>
<li>发明（设计）人：郭耀,马子昂,王浩宇,陈向群</li>
<li>主分类号：G06F17/30,G06F17/00,G,G06,G06F,G06F17</li>
<li>分类号：G06F17/30,G06F17/00,G,G06,G06F,G06F17,G06F17/30,G06F17/00</li>
<li>主申请人地址：100871 北京市海淀区颐和园路5号<br>专利代理机构：北京万象新悦知识产权代理事务所(普通合伙) 11360</li>
<li>代理人：朱红涛</li>
<li>国别省市代码：北京;11</li>
<li>主权项：一种基于应用程序编程接口的安卓重打包应用检测方法，适用于检测安卓平台的应用程序，其特征是，包括如下步骤：A.对应用程序文件进行预处理，将二进制代码转换为smali代码文件、提取应用程序的作者签名信息并构造应用程序编程接口；B.对smali代码文件进行处理，以文件夹为单位，提取出安卓应用程序编程接口的调用情况以及对应的调用次数，组成特征向量；C.计算不同文件夹之间的特征向量的相似度，并进行聚类，去除第三方库；D.再次根据应用程序编程接口，计算应用程序的特征向量，对比应用程序的特征向量的相似度，聚类并判断哪些应用程序为重打包应用。</li>
</ul>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>一种基于应用程序编程接口的安卓重打包应用检测方法。首先对应用程序文件进行处理，得到smali代码文件；对于每一个文件夹，从smali代码中提取出安卓应用程序编程接口的使用情况，统计频率信息；然后通过文件夹之间的相互比较来进行聚类，将相似度高、重复数量多的文件夹视为第三方库；去除第三方库干扰之后，再以应用程序文件为单位，对相似度高的程序文件进行聚类；最后结合作者签名信息，判断应用程序之间是否具有重打包关系。利用本发明提供的技术方案，可以在大规模应用市场级别的应用中，对重打包应用进行自动的检测，有很高的效率以及准确性。</p>
<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>一种基于应用程序编程接口的安卓重打包应用检测方法</p>
<p>技术领域</p>
<p>[0001]    本发明涉及一种基于应用程序编程接口的重打包应用检测方法，具体涉及一种在安卓平台下，利用应用程序代码中关键应用程序编程接口的使用频率，过滤第三方库以及检测重打包应用的方法。</p>
<p>背景技术</p>
<p>[0002]    近年来，移动设备(例如智能手机和平板)的发展十分迅速。Android平台占据了智能移动市场的主要份额，据统计每天有超过130万部搭载Android系统的移动设备被激活使用。随着移动设备的流行和普及，涌现出大量的移动应用。截止至2013年2月，谷歌官方市场中已经有超过80万个Android移动应用。这些移动应用不仅增强了移动设备的功能，还大大丰富了用户体验。用户逐渐习惯于使用多样的应用来娱乐和办公，智能移动设备和移动应用已经成为人们生活中不可或缺的一部分。</p>
<p>[0003]    由于Android系统的开放性，用户不仅能从谷歌官方市场下载和安装应用，也可以从任意的第三方市场甚至网站和论坛下载和安装应用。同时，应用的开发者可以将应用提交到任意的第三方市场来供用户下载。因此对于应用市场的管理者来说，只有管理好市场中应用的质量和提供一个良好的市场环境，才能吸引更多的用户和开发者。</p>
<p>[0004]    然而，Android应用很容易被破解，目前有很多开源的反编译工具可以使用。因此，一些恶意的开发者可以很容易破解应用市场中的合法应用，修改代码后重新打包并在市场中发布。付费的应用可以被破解然后免费发布出去，恶意的开发者也可以将原应用中的广告库替换掉来谋取利益。更为严重的是，恶意的开发者可以将恶意的代码植入到合法的应用中然后发布出去，以此来感染更多的用户。应用重打包的行为不仅侵犯了开发者的利益，也严重威胁到了用户的安全和隐私。</p>
<p>[0005]    应用市场的管理者需要控制市场中应用的质量，检测和移除这些潜在的威胁。然而，在应用市场中检测重打包应用是很困难的。一方面，管理者大多数时候只能通过手动比较来判断应用是否是重打包应用，并且很多时候手动比较也很难得到正确的结果。例如，重打包的应用可以在功能上包含了几个不同的应用，或者重打包的应用包含了恶意软件等等。另一方面，考虑到应用市场中海量数目的应用，手动进行重打包检测不可靠且没有可扩展性。因此，在应用市场级别的应用重打包检测需要一个自动化的系统来完成。</p>
<p>[0006]    Wu Zhou等提出在Dalvik字节码层次上进行应用重打包检测(“DroidMOSS:Detecting Repackaged Smartphone Applications in Third-PartyAndroid Marketplaces”, C0DASPY’ 12)。DroidMOSS 提取 Dalvik 字节码中的操作码序列，使用模糊散列的方法对应用程序产生一个指纹签名并作为特征，通过比较应用程序指纹之间的编辑距离得到应用程序的相似度。类似的，Steve Hanna等提出了 Juxtapp (“ Juxtapp: AScalable System for Detecting Code Reuse Among Android Applications”,DIMVA’12),使用了特征散列的方法对应用程序产生指纹签名并且以它们之间的Jaccard距离作为重打包的判断依据。DroidMOSS和Juxtapp都是从Dalvik字节码中提取静态的特征信息,并且使用不同的散列技术来将这些静态信息表示成向量从而进行比较。这种比较方法的优点是简单快速，能够很容易扩展到大规模应用的比较。但是重打包应用很容易就能逃避这种检查技术，比如最简单的交换代码顺序或者增添删除操作码就会导致应用程序的指纹发生改变从而导致检测方法失效。</p>
<p>[0007]    Jonathan Crussell 等提出 DNADroid (“Attack of the Clones !Detecting ClonedApplications on Android Markets”，ESORICS’12),通过比较应用的程序依赖图(PDG)来检测重打包应用。基于程序依赖图的检测技术是代码克隆检测中经常使用的方法。它使用了程序的语义信息，因此检测的准确率应该会比较高。但是基于程序依赖图的检测方法执行效率是个问题。在DNADroid中，作者使用Hadoop Mapreduce并行计算框架在四台机器上执行应用的重打包检测，但是平均每分钟只能比较0.71个应用对。因此，这种方法的扩展性不高，很难应用到应用市场级别数十万的应用检测。</p>
<p>[0008]    综上，现有的应用重打包检测方法主要存在两个问题:</p>
<p>[0009]    I)安卓应用程序中的第三方库代码的使用对重打包应用的检测干扰很大，现有的做法大部分都是通过建立第三方库的白名单来过滤掉第三方库的代码。但是由于现有的应用程序中大多数都经过了代码混淆，因此这种方法对于代码混淆过后的应用程序是无效的。</p>
<p>[0010]    2)系统必须要保证准确性的同时具有很高的可扩展性，这就需要提出的检测方法有低误报率和高查全率，应该考虑到不同层面上的代码更改、添加和删除，并且能够快速地在海量应用中检测到重打包应用。但是现有的方法中没有做到这一点。</p>
<p>发明内容</p>
<p>[0011]    本发明的目的是提供一种新的方法，使得在较小开销，较快时间内，对给出的若干安卓应用程序进行预处理，得到一些关于应用程序编程接口的特征向量，通过相似度计算，进行聚类，去除第三方库，并得 到这些安卓应用程序中哪些是重打包应用的信息。</p>
<p>[0012]    本发明的原理是:首先对应用程序文件(apk文件)进行处理，得到smali代码文件，smali代码是原来应用程序二进制代码的一种中间表示。处理得到的smali文件是按照原始的文件夹层次组织的，对于每一个文件夹，从smali代码中提取出安卓应用程序编程接口的使用情况，统计频率信息。然后通过文件夹之间的相互比较来进行聚类，将相似度高、重复数量多的文件夹视为第三方库。去除第三方库干扰之后，再以应用程序文件为单位，对相似度高的程序文件进行聚类。最后结合作者签名信息，判断应用程序之间是否具有重打包关系。</p>
<p>[0013]    本发明提供的技术方案如下:</p>
<p>[0014]    一种基于应用程序编程接口的安卓重打包应用检测方法，适用于检测安卓平台的应用程序，其特征是，包括如下步骤(流程参照图1):</p>
<p>[0015]    A.对应用程序文件进行预处理，将二进制代码转换为smali代码文件、提取应用程序的作者签名信息并构造应用程序编程接口；</p>
<p>[0016]    B.对smali代码文件进行处理，以文件夹为单位，提取出安卓应用程序编程接口的调用情况以及对应的调用次数，组成特征向量；</p>
<p>[0017]    C.计算不同文件夹之间的特征向量的相似度，并进行聚类，去除第三方库；[0018]    D.再次根据应用程序编程接口，计算应用程序的特征向量，对比应用程序的特征向量的相似度，聚类并判断哪些应用程序为重打包应用。</p>
<p>[0019]    所述的安卓重打包应用检测方法，其特征是，步骤A包括:</p>
<p>[0020]    Al.提取安卓应用程序二进制代码文件以及ΜΕΤΑ-1NFO文件中的作者签名信息文件；</p>
<p>[0021]    A2.使用现有工具，将二进制代码转换为smali代码文件；</p>
<p>[0022]    A3.使用现有工具，从相应文件提取作者签名内容。</p>
<p>[0023]    所述的安卓重打包应用检测方法，其特征是，步骤B包括:</p>
<p>[0024]    B1.对步骤A中得到的smali代码文件进行处理,读取smali文件的内容,并用正则表达式进行匹配，将应用程序编程接口函数与其余信息剥离，并以文件夹为单位，统计汇总;</p>
<p>[0025]    B2.把步骤BI中得到的应用程序编程接口数据转化为易于程序识别与操作的欧几里得空间的特征向量。</p>
<p>[0026]    所述的安卓重打包应用检测方法，其特征是，步骤C包括:</p>
<p>[0027]    Cl.对每两个文件夹之间求向量距离。假设需要比较文件夹a和文件夹b的相似度。首先通过步骤B取得a和b的特征向量，分别为α和β在欧几里德空间中，若α在某一维度上有值，而β在该维度上没有值，则β在该维度上补充为0，反之亦然。对α和β，采用以下公式来求取向量距离:<br><img src="https://patentimages.storage.googleapis.com/CN103473346A/CN103473346AD00051.png" alt=""><br> Figure CN103473346AD00051<br>[0029]    其中η是α和β的维度。</p>
<p>[0030]    C2.根据向量距离，确定阈值，进行聚类。在划分的众多类中，再将出现次数多的类视为第三方库中的类文件，并在步骤D的计算中除去。</p>
<p>[0031]    所述的安卓重打包应用检测方法，其特征是，步骤D包括:</p>
<p>[0032]    Dl.根据每个文件夹的特征向量，把未经过第三方库过滤掉的文件夹的特征向量，使用加总的方法，整合为每个应用的特征向量。</p>
<p>[0033]    D2.使用Cl中出现的公式，计算两两之间的距离，并以此为基础采用聚类算法，把距离低于某个阈值的应用聚合到一个类。</p>
<p>[0034]    D3.对D2步骤中同一个类的应用，审查他们的作者信息。如果同一个类中的应用，其作者签名不同，则认定两个应用之间有重打包的关系。</p>
<p>[0035]    所述的安卓重打包应用检测方法，其特征是，步骤C2中，确定的阈值为0.05。</p>
<p>[0036]    所述的安卓重打包应用检测方法，其特征是，步骤D2中，确定的阈值为0.1。</p>
<p>[0037]    本发明的有益效果:利用本发明提供的技术方案，可以在大规模应用市场级别的应用中，对重打包应用进行自动的检测，有很高的效率以及准确性。</p>
<p>附图说明</p>
<p>[0038]    图1是本发明所述方法的总体流程图</p>
<p>[0039]    图2本发明的应用程序预处理流程图。</p>
<p>[0040]    图3本发明的计算特征向量的流程图。[0041]    图4本发明的过滤第三方库的流程图。</p>
<p>[0042]    图5本发明的重打包判断流程图。</p>
<p>[0043]    图6本发明实施例提供的应用程序预处流程图。[0044]图7本发明实施例提供的计算特征向量的流程图。</p>
<p>[0045]    图8本发明实施例提供的过滤第三方库的流程图。</p>
<p>[0046]    图9本发明实施例提供的重打包判断流程图。</p>
<p>具体实施方式</p>
<p>[0047]    本发明的具体实施方式如下:</p>
<p>[0048]    A.在对应用程序文件进行预处理时，执行如下操作(如图2所示):</p>
<p>[0049]    Al.使用现有工具，例如 keytool (JDK (Java Development Kit)开发组件工具)，从相应apk文件中提取作者签名内容；</p>
<p>[0050]    A2.使用现有工具，例如 apktool (<a href="https://code" target="_blank" rel="external">https://code</a>, google, com/apktool/),将 apk包中的压缩的二进制代码提取并转换为smali代码文件。</p>
<p>[0051]    B.在对smali文件进行处理组成特征向量时，执行如下操作(如图3所示):</p>
<p>[0052]    B1.对步骤A2得到的smali代码文件进行处理,读取smali文件的内容,使用正则表达式进行匹配，将应用变成接口函数与其他信息进行剥离，并以文件夹为单位，统计汇</p>
<p>[0053]    B2.把步骤BI中得到的应用程序编程接口数据转化为易于程序识别和操作的欧几里德空间特征向量。</p>
<p>[0054]    C.计算不同文件夹之间的特征向量的相似度，并进行聚类，去除第三方库时，执行如下操作(如图4所示):</p>
<p>[0055]    Cl.对每两个文件夹之间求向量距离。假设需要比较文件夹a和文件夹b的相似度。首先通过步骤B取得a和b的特征向量，分别为α和β。在欧几里德空间中，若α在某一维度上有值，而β在该维度上没有值，则β在该维度上补充为0，反之亦然。对α和β，采用以下公式来求取向量距离:</p>
<p>[0056]<br><img src="https://patentimages.storage.googleapis.com/CN103473346A/CN103473346AD00061.png" alt=""><br> Figure CN103473346AD00061<br>[0057]    其中n是α和β的维度。</p>
<p>[0058]    C2.根据特征向量的距离，确定阈值，进行聚类。在划分的众多类中，再将出现次数多的类视为第三方库，并在步骤D的计算中除去。</p>
<p>[0059]    D.在再次根据应用程序编程接口，计算应用程序的特征向量，对比应用程序的特征向量的相似度，聚类并判断哪些应用程序为重打包应用时，执行如下操作(如图5所示):</p>
<p>[0060]    Dl.根据每个文件夹的特征向量，把未经过第三方库过滤掉的文件夹的特征向量，使用加总的方法，整合为每个应用的特征向量。</p>
<p>[0061]    D2.使用Cl中出现的公式，计算两两之间的距离，并以此为基础采用聚类算法，把距离低于某个阈值的应用聚合到一个类。</p>
<p>[0062]    D3.对D2步骤中同一个类的应用，审查他们的作者信息。如果同一个类中的应用，其作者签名不同，则认定两个应用之间有重打包的关系。[0063]    下面通过实例对本发明做进一步说明。</p>
<p>[0064]    实施例1:</p>
<p>[0065]    假定现有1000个安卓apk安装程序，需要从中找出具有重打包关系的软件。文件名分别是 1.apk, 2.apk 直到 1000.apk。</p>
<p>[0066]    A.预处理的流程包括如下步骤(如图6所示):</p>
<p>[0067]    Al.对任意一个apk文件,如1.apk,使用开源的keytool工具可以得到作者签名信息文件；把这些签名记录为一个列表，以备步骤D3使用。</p>
<p>[0068]    A2.对任意一个apk文件，如1.apk,使用开源的apktool工具，可以将apk解压，解压包内有一个smali文件夹，文件夹内有相应的smali代码文件。</p>
<p>[0069]    B.生成特征向量的流程，包括如下步骤(如图7所示):</p>
<p>[0070]    B1.对任意一个apk文件，如1.apk,对预处理得到的smali代码文件处理,读取smali里的内容，获得关于应用程序编程接口函数的信息，以文件夹为单位，进行汇总。如</p>
<p>1.apk的smali文件夹下只有两个文件夹,那么就分别计算这两个文件夹内smali文件对应用程序编程接口函数的调用情况。</p>
<p>[0071]    B2.得到上一步骤中的调用情况，根据调用的名称与次数，把调用情况整合成一个欧几里得空间中的多维的特征向量。如1.apk的第一个文件夹中，使用调用X有2次，使用调用y有5次，则多维特征向量在X上的分量就是2，在y上的分量就是5。</p>
<p>[0072]    C.计算文件夹相似度并去除第三方库的流程，包括如下步骤(如图8所示):</p>
<p>[0073]    Cl.对于两个文件夹，如1.apk中的文件夹一，与2.apk中的文件夹三，使用公式比较距离，得到一个distance的值。</p>
<p>[0074]    C2.根据distance的值，如果这个值高于阈值0.05，就认为这两个文件夹不相似。以该阈值进行聚类。如果聚类的结果表明，某一类别的文件夹出现的次数多余某个次数(次数的阈值与进行比较的总apk数量有关)，那么就认为这个文件夹是一个第三方库的文件夹，应当在步骤D的比较中去除。否则就认为该文件夹不是第三方库，需要在步骤D中继续计算。</p>
<p>[0075]    D.最终判断重打包的流程，包括如下步骤(如图9所示):</p>
<p>[0076]    Dl.对于每一个apk文件，整合其所有的文件夹的特征向量，将未被过滤为第三方库的文件夹的特征向量加起来。如1.apk，如果它含有两个smali文件夹，而且两个文件夹均没有被步骤C2过滤，则直接把两个特征向量用加法加总，作为1.apk的特征向量。</p>
<p>[0077]    D2.使用Cl步骤中的公式,计算任意两个apk应用之间的距离，如计算1.apk和</p>
<p>2.apk的距离。如果1.apk和2.apk计算所得的distance大于0.1,则认为1.apk与2.apk没有直接重打包的关系，否则认为1.apk与2.apk有重打包的嫌疑。以此为依据进行聚类。</p>
<p>[0078]    D3.结合前面得到的作者签名信息，进一步对结果进行筛选排查，如若1.apk与</p>
<p>2.apk因为距离小于0.1被聚类到同一个类别，这时候就把1.apk在Al步骤得到的作者签名信息，与2.apk的作者签名信息进行比较，如果发现这两个应用程序的作者信息不同，则认定1.apk与2.apk这两个应用程序为重打包应用程序。如果发现这两个应用程序的作者信息一致，则认定1.apk与2.apk是同一个作者的相同作品，或同一个作者的不同版本作品O</p>
<h1 id="Claims"><a href="#Claims" class="headerlink" title="Claims"></a>Claims</h1><p>1.一种基于应用程序编程接口的安卓重打包应用检测方法，适用于检测安卓平台的应用程序，其特征是，包括如下步骤: A.对应用程序文件进行预处理，将二进制代码转换为smali代码文件、提取应用程序的作者签名信息并构造应用程序编程接口； B.对smali代码文件进行处理，以文件夹为单位，提取出安卓应用程序编程接口的调用情况以及对应的调用次数，组成特征向量； C.计算不同文件夹之间的特征向量的相似度，并进行聚类，去除第三方库； D.再次根据应用程序编程接口，计算应用程序的特征向量，对比应用程序的特征向量的相似度，聚类并判断哪些应用程序为重打包应用。<br>2.如权利要求1所述的安卓重打包应用检测方法，其特征是，所述步骤A包括: Al.提取安卓应用程序二进制代码文件以及ΜΕΤΑ-1NFO文件中的作者签名信息文件； A2.使用现有工具，将二进制代码转换为smali代码文件； A3.使用现有工具，从相应文件提取作者签名内容。<br>3.如权利要求1所述的所述的安卓重打包应用检测方法，其特征是，所述步骤B包括: B1.对步骤A中得到的smali代码文件进行处理，读取smali文件的内容，并用正则表达式进行匹配，将应用程序编程接口函数与其余信息剥离，并以文件夹为单位，统计汇总；B2.把步骤BI中得到的应用程序编程接口数据转化为易于程序识别与操作的欧几里得空间的特征向量。<br>4.如权利要求1所述的安卓重打包应用检测方法，其特征是，所述步骤C包括: Cl.对每两个文件夹之间求向量距离，假设需要比较文件夹a和文件夹b的相似度，首先通过步骤B取得a和b的特征向量，分别为α和β在欧几里德空间中，若α在某一维度上有值，而β在该维度上没有值，则β在该维度上补充为0，反之亦然；对α和β，采用以下公式来求取向量距离: <img src="https://patentimages.storage.googleapis.com/CN103473346A/CN103473346AC00021.png" alt=""> 其中η是α和β的维度； C2.根据向量距离，确定阈值，进行聚类。<br>5.如权利要求4所述的安卓重打包应用检测方法，其特征是，步骤D包括: Dl.根据每个文件夹的特征向量，把未经过第三方库过滤掉的文件夹的特征向量，使用加总的方法，整合为每个应用的特征向量； D2.使用Cl中出现的公式，计算两两之间的距离，并以此为基础采用聚类算法，把距离低于某个阈值的应用聚合到一个类； D3.对步骤D2中同一个类的应用，审查他们的作者信息，如果同一个类中的应用，其作者签名不同，则认定两个应用之间有重打包的关系。<br>6.如权利要求4所述的安卓重打包应用检测方法，其特征是，步骤C2中所述的阈值为0.05。<br>7.如权利要求5所述的安卓重打包应用检测方法，其特征是，步骤D2中所述的阈值为`0.1。</p>
<p><img src="http://imglf2.nosdn.127.net/img/MGpGUW9CdGlzcDdkNmVpc0xMbWpzTitjUUFJSUJHd3VHR294NnFKNUlvbGEyS0o5dWlvR2JRPT0.png?imageView&amp;thumbnail=2000y2829&amp;type=jpg&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=680&amp;dx=32&amp;dy=36&amp;stripmeta=0" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;适用于检测安卓平台的应用程序的一种安卓重打包应用检测方法&lt;br&gt;
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Android" scheme="http://zablog.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>更换GPU</title>
    <link href="http://zablog.me/2016/09/11/replace-GPU/"/>
    <id>http://zablog.me/2016/09/11/replace-GPU/</id>
    <published>2016-09-11T12:26:44.000Z</published>
    <updated>2016-12-07T11:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈我承认我没有拍摄什么高质量的图像。记录一下更换显卡的过程，供参考。</p>
<p>主板和显卡之间的连接通道是PCI-E接口。<br>现在的主板越来越厉害了，所以可能有多个PCI-E接口，同时要有版本的区别，比如PCI-E v3/v2, x16/x8。当然要学会插对，这个可以参考<a href="http://diy.pconline.com.cn/graphics/reviews/1210/3047220_all.html" target="_blank" rel="external">显卡插错插槽的后果?PCI-E X16与X8性能PK</a><br>一般来说问题不大，显卡和主板的兼容性是很好的，很少有说因为主板不支持而无法连接显卡的情况，除非那主板实在是过于过于过于古老了。</p>
<h1 id="原机"><a href="#原机" class="headerlink" title="原机"></a>原机</h1><p>台式机的型号是 2013年07月02日的 ThinkCentre M8400t，现在类似的版本应该已经升级到M8600t了吧。Core i7 3770 的CPU。<br>长得大概这个样子。<br><img src="https://img.alicdn.com/imgextra/i1/318290277/T2fUmmXT0XXXXXXXXX_!!318290277.jpg" alt=""></p>
<h1 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h1><p>好啦，首先我在京东买了一个显卡，<a href="http://item.jd.com/3281156.html" target="_blank" rel="external">“索泰（ZOTAC）Geforce GTX1060-6GD5 X-GAMING OC 1569-1784MHz/8008MHz 6G/192bit GDDR5 PCI-E显卡”</a>。</p>
<p><img src="http://img20.360buyimg.com/vc/jfs/t2731/180/3429863697/149042/496970ed/578d99afN946f7efb.jpg" alt=""></p>
<p>GTX 1060 虽然没有呼吸灯，但是依然是2016年秋季最具性价比最值得购买的产品之一，性能和GTX980相当。</p>
<h1 id="拆机箱"><a href="#拆机箱" class="headerlink" title="拆机箱"></a>拆机箱</h1><p>这部分没啥好说的，螺丝卸了就拆了，太熟练，没有坎儿。前几天拆下来原有的硬盘，换了一个2TB的硬盘，重新安装Win10系统，版本号10240，使用学校公共购买的激活了一下<a href="http://software.pku.edu.cn/" target="_blank" rel="external">北大良心软件</a>。</p>
<h1 id="连电源"><a href="#连电源" class="headerlink" title="连电源"></a>连电源</h1><p>实现拆开瞅了一下，并没有给显卡供电的接口。提前做了一下知识，现在的主流显卡有 8pin/6pin 两种接口，就是8口线和6口线。<br>一般低端显卡，只需要主板供电即可。主板直插可以给显卡供给大概75W吧，这对于低端显卡已经足够了。<br>中端显卡一般是6pin的供电，比如GTX950什么的。<br>今年大概10月份英伟达应该会推出GTX1050，它也许就会使用6pin供电。<br>GTX1060的定位是中高端显卡，和GTX1080 GTX1070同属于高端系列。GTX1060这种显卡的供电需要就更大了，所以使用了8pin供电。<br>GTX1080这种高端显卡甚至需要8+8pin供电。</p>
<p>联想自带电源非常可怜，功率上还不错，可以提供360W的功率，但是在线材上就太可怜了，只提供了一个14pin和一个小4pin出来。这显然不能供显卡使用。</p>
<p>以前有些显卡是不接外接电源也能使用，但是效果比较差的。现在这些显卡没有外接电源的后果就是黑屏，没什么好说的。</p>
<p>于是买了一个电源来给显卡供电。<a href="http://item.jd.com/251340.html" target="_blank" rel="external">“安钛克（Antec）额定450W VP 450P 电脑电源（双显卡接头/两年质保/主动式PFC/12CM静音风扇/台式机电源）”</a></p>
<p><img src="http://img20.360buyimg.com/vc/jfs/t1705/276/1215416282/100651/6e726fde/55e53779N387e8184.jpg" alt=""></p>
<p>现在终于有8pin的口了。PS：事实上是6+2pin。6+2pin的设置就是既支持6pin，又支持8pin。</p>
<p>VP-450p 这个电源支持双8pin的，不过我的小显卡不需要。如果买了1080或者双显卡，肯定就需要了吧。</p>
<p>不过现在难题来了。VP-450p只提供20+4pin，并不提供14pin的主板供电电源。这个好坑，只有联想等少数厂商才用这种无聊的14pin来给主板供电。我并没有别的办法啊。我异想天开地决定使用两个电源，即老电源供电主板，新电源供电显卡。不过无情的现实还是啪啪啪地打脸。没有主板向电源发送的“开机信号”，电源根本就不供电啊，所以显卡的灯不亮，风扇也连转都不转。</p>
<p>机器都拆开了，没办法装，这可咋办。好在依托了北大的位置优势。上某宝上迅速查找一个20转14pin的连接线。当然啦最后只找到了24转14pin的连接线，不过没关系，我的电源是20+4pin的，可以组合为24pin。询问商家，真巧，那个商家就在中关村。骑上单车十分钟就买了来，才花了RMB10。上图！</p>
<p><img src="http://imglf2.nosdn.127.net/img/MGpGUW9CdGlzcDZXMU9GY2JtZHhmeG9EVTFKTmtzYWxqMytiemFKNUExdFJ3dDJ6b21sd2tRPT0.jpeg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt=""></p>
<p>大拇指端是24pin，右边是14pin。回来连接上，左手连接电源，右手连接主板，Works。</p>
<h1 id="连接显卡"><a href="#连接显卡" class="headerlink" title="连接显卡"></a>连接显卡</h1><p>首先把旧的显卡拔下来，注意的是主板PCI-E接口都有一个卡口，要拨动一下才能够拔下显卡。新的显卡明显比原来的显卡要大，长了1.5倍，宽了1.4倍，厚了大概3倍。</p>
<p><img src="http://imglf1.nosdn.127.net/img/MGpGUW9CdGlzcDZXMU9GY2JtZHhmL1N2N1lFellDR1FIQklqMFVnQzl3WlR0UmlsL3BvblJ3PT0.jpeg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt=""></p>
<p>令人失望的是，主板的结构实在是太坑了，所以因为体积占掉了两个SATA数据接口。SATA3给占掉了，只剩下SATA2，大概也许就没有升级SSD的任何必要了。</p>
<h1 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h1><p>ZOTAC赠送的光盘大概也许没什么意义，除了一个FireStorm，可以用来调节风扇、频率、电压等等。</p>
<p>好不容易把最新的驱动安装程序下载下来，但是提示</p>
<blockquote>
<p>NVIDIA安装程序无法继续</p>
<p>此NVIDIA驱动程序与此Windows版本不兼容。</p>
</blockquote>
<p><img src="http://imglf1.nosdn.127.net/img/MGpGUW9CdGlzcDZXMU9GY2JtZHhmemhUWVNJQnhOSXUzNEFodnVYRlk2ckhuTlRBeU81RE5RPT0.jpeg?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt=""></p>
<p>明明是Windows10，明明是64位，明明是GTX1060，哪里就不兼容了呢？答案是这个驱动和10240不兼容。</p>
<p>话说，Win10在可预见的年限内不会有版本号的变更了，就是说没有Win11的计划了。但是这不代表Windows10没有更新。版本号还是在一直变更的，10240是最初的基础版本的版本号，后面有很多更新。距离Win10推出已经一年多了，势必有很大的更新。</p>
<p>我搞了一个微软Windows10易升，把Window升级到了版本1607，然后再次安装，就成功了。</p>
<p>效果就不晒了，和网上宣传的没有太大差别。撸大师显卡跑分可以超过97%的用户。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>做好调研再买东西。做好调研再买东西。做好调研再买东西。</p>
]]></content>
    
    <summary type="html">
    
      记录一下自己更换显卡的过程。
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
  </entry>
  
  <entry>
    <title>PyCharm EDU</title>
    <link href="http://zablog.me/2016/09/07/PyCharm-EDU/"/>
    <id>http://zablog.me/2016/09/07/PyCharm-EDU/</id>
    <published>2016-09-07T13:38:16.000Z</published>
    <updated>2016-09-11T13:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h1><p>PyCharm 实在是Python程序员所赞叹的优秀IDE。这不重装了Windows之后，第一件事就是安装PyCharm。不过这次看官网，有一点儿区别，多了一个PyCharm EDU。</p>
<p>本来呢，我以为EDU版本就是只需要上传学号或者是使用edu邮箱验证，就可以免费使用收费功能。不过现实却完全不是这样。囧oz</p>
<h1 id="EDU"><a href="#EDU" class="headerlink" title="EDU"></a>EDU</h1><p>实际上呢，EDU版本只是为了方便老师教学，方便学生学习的一个PyCharm版本而已。自己学了Python很久了，正好看到有一个入门，想看看有什么知识可以巩固，不过看了一下发现这实在是太简单了。</p>
<p>不过不得不说，初学者的这些章节设计还是蛮好的，对于初学Python有很大帮助。以前别人问我怎么学Python，我会推荐liaoxuefeng.org去学，但是现在，我可以直接推荐PyCharm了。</p>
<p>从界面上看，和PyCharm略有区别，但是总体来说很相似。<br>安装文件呢要比CE还要略小一点。<br>功能当然看起来是不够全面的啦，不说了我去装PyCharm CE了。暂时没钱买Pro。</p>
<p><img src="http://imglf.nosdn.127.net/img/MGpGUW9CdGlzcDZ3Q2F5L2N4alRKYXh4Znh2YkFrZWhXMW5GQUV1Mm56N1IrQ0hhQnBtby93PT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt=""></p>
<p><img src="http://imglf0.nosdn.127.net/img/MGpGUW9CdGlzcDZ3Q2F5L2N4alRKZjUvOWRpczlEU2drUG1vV1NxeXBJRnpwbU5YU2RuV1FnPT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt=""></p>
<p><img src="http://imglf1.nosdn.127.net/img/MGpGUW9CdGlzcDZ3Q2F5L2N4alRKYXh4Znh2YkFrZWhCK1JXS1RseHpEMkVqSU1pc0J1dUV3PT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt=""></p>
]]></content>
    
    <summary type="html">
    
      PyCharm 实在是Python程序员所赞叹的优秀IDE。这不重装了Windows之后，第一件事就是安装PyCharm。不过这次看官网，有一点儿区别，多了一个PyCharm EDU。本来呢，我以为EDU版本就是只需要上传学号或者是使用edu邮箱验证，就可以免费使用收费功能。不过现实却完全不是这样。囧oz
    
    </summary>
    
      <category term="学习笔记" scheme="http://zablog.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://zablog.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>FBX SDK Sample Guide - for beginners</title>
    <link href="http://zablog.me/2016/08/02/FBX%20SDK%20Sample%20Guide/"/>
    <id>http://zablog.me/2016/08/02/FBX SDK Sample Guide/</id>
    <published>2016-08-02T04:46:23.000Z</published>
    <updated>2016-09-11T13:46:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Current Version: FBX SDK 2016.1.1 for VS2012</p>
<p>介绍一下FBX SDK Sample的内容，顺序按照从易到难，而不是字母顺序。</p>
<h2 id="UI-Example"><a href="#UI-Example" class="headerlink" title="UI Example"></a>UI Example</h2><p>最简单的Example，UI Example，是直接运行之后就有图案的。<br>文件夹下有三个例子，分别是：</p>
<ul>
<li>CubeCreator</li>
<li>ImportExport</li>
<li>SceneTreeView</li>
</ul>
<p>首先看的是ImportExport，这个最基础。因为使用FBX SDK的最基础的内容，无非是Import和Export。</p>
<p>使用方法很简单，首先打开VS2012，然后点击FILE-Open-Project/Solution，然后再文件浏览器中选择C:\Program Files\Autodesk\FBX\FBX SDK\2016.1.1\samples\UI Examples\ImportExport\ImportExport_net2012.vcxproj即可。不用修改任何东西，点击运行，就会出现如下界面。</p>
<p><img src="http://imglf.nosdn.127.net/img/MGpGUW9CdGlzcDdWYkNFM1BkbE5FQ0FPOEErYzhwN25maXc0d1RnV3JTaXpTZ2RmWkFoTzJnPT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt="ImportExport1"></p>
<p>执行。</p>
<p><img src="http://imglf2.nosdn.127.net/img/MGpGUW9CdGlzcDdWYkNFM1BkbE5FT05WbXBMQlFmRWZDaGdHZXV4K1NnSnQ3cHBqZk0yczlBPT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt="ImportExport2"></p>
<p>没错就是这么简单，具体的功能就是导入然后直接导出而已，没有什么特别的。在我这个例子中，我导入了一个叫做cubes.fbx的文件，然后导出了cube.1.1.fbx文件。</p>
<h2 id="SceneTreeView"><a href="#SceneTreeView" class="headerlink" title="SceneTreeView"></a>SceneTreeView</h2><p>下面的例子我就不去一一运行了，因为确实是很简单。</p>
<p>SceneTreeView这个例子，是打开一个FBX，然后把这个FBX的所有内容按照树形图的方式展示。当然展示的主要内容是Node，包含着mesh、Attribute、Skin、Skeleton、Animation等等…</p>
<h2 id="CubeCreator"><a href="#CubeCreator" class="headerlink" title="CubeCreator"></a>CubeCreator</h2><p>不断地创建Cube。从这个例子可以好好地学习更基础的FBX中的模型的数据结构。再有就是映射方式，Direct和IndextoDirect的区别一定要掌握。</p>
<h2 id="Instance"><a href="#Instance" class="headerlink" title="Instance"></a>Instance</h2><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br>/<em> This example shows how to instanciate meshes and curves in FBX.          </em>/<br>/<em>  - Create a cube                                                         </em>/<br>/<em>  - Create instances of this cube (new nodes that point to the same mesh) </em>/<br>/<em>  - Apply the same materials to the polygons of these cubes               </em>/<br>/<em>  - Create an animation curve                                             </em>/<br>/<em>  - Animate all cubes using the same animation curve.                     </em>/<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p>
<p>创建一个立方体<br>创建立方体的多个实例<br>为这些立方体的面应用同样的材质<br>创建一个动画轨迹<br>为所有的立方体应用同样的动画轨迹</p>
<h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><p>为了节约模型的空间，有的模型在一个场景中需要出现多次的。比如草地上的草，桌子上的杯子，赛场的座位等等。这些模型没有必要做那么多，否则很耗费文件大小。这个时候一样的东西只要定义一次，然后挂载到不同的Node上就可以了，这个过程称之为实例化。</p>
<h2 id="UserProperties"><a href="#UserProperties" class="headerlink" title="UserProperties"></a>UserProperties</h2><p>用户自定义的内容。</p>
<p>/////////////////////////////////////////////////////////////////////////<br>//<br>// In this example a scene is created containing a cube and a pyramid.<br>//<br>// The example illustrates two things:<br>//  1) How to create user properties, attach them to the cube and<br>//     animate them.<br>//  2) How to create a constraint, constraining the pyramid to the cube.<br>//<br>//<br>/////////////////////////////////////////////////////////////////////////</p>
<p>在这个例子中，首先创建了一个含有一个立方体和一个金字塔的场景。<br>这个例子展示了两个功能：<br>1） 如何创建用户内容，然后把内容附到cube上。<br>2） 如何创建一个约束，使金字塔约束到立方体上。</p>
]]></content>
    
    <summary type="html">
    
      FBX是3D模型常用的文件格式，为了开发直接处理FBX的软件，AutoDesk公司提供了C/C++和Python的两套SDK。这里介绍一下FBX SDK Sample for C++的内容，顺序按照从易到难，而不是字母顺序。
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="3D" scheme="http://zablog.me/tags/3D/"/>
    
      <category term="FBX" scheme="http://zablog.me/tags/FBX/"/>
    
  </entry>
  
  <entry>
    <title>使用FBX SDK导出ASCII的FBX文件</title>
    <link href="http://zablog.me/2016/07/25/fbx_ascii/"/>
    <id>http://zablog.me/2016/07/25/fbx_ascii/</id>
    <published>2016-07-25T06:48:06.000Z</published>
    <updated>2016-07-25T06:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用<a href="http://www.autodesk.com/products/fbx/overview" target="_blank" rel="external">FBX SDK</a>的时候，导出的FBX默认总是Binary的，也就是说它直接用notepad打开后多数内容是乱码。使用binary的方式可以使文件size变小，但是却失去了可读性，这对于FBX SDK的初学者是很不利的。所以我认为FBX SDK一定会有导出ASCII的方法，然而<a href="http://help.autodesk.com/view/FBX/2017/ENU/" target="_blank" rel="external">FBX SDK Help文档</a>里并没有相关的直接指导。最后还是看到了一篇<a href="http://forums.autodesk.com/t5/fbx-sdk/fbx-export-binary-ascii/td-p/4146847?nobounce" target="_blank" rel="external">论坛文章</a>才让我茅塞顿开。<br>当然这个论坛讨论中，第一个solution采用了EXP_ASCIIFBX，这个经过测试是无效的，但是第二个方法却很有用。<br>如果只是寻找解决方法的话，那么完全没有必要去点开那个论坛，我会在下面详细说明。</p>
<a id="more"></a>
<p>其实Sample程序中就有内容可以参照：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$FBXSDK_DIR</span>/201X.X/samples/ConvertScene/main.cxx</div></pre></td></tr></table></figure>
<p>这一段就是与导出的格式直接相关的。总体来说，它的实现很简单，只是通过</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> lFormat = lSdkManager-&gt;GetIOPluginRegistry()-&gt;FindWriterIDByDescription(fileTypeExpression);</div></pre></td></tr></table></figure>
<p>找到Format对应的标号，然后导出的时候作为参数导出即可。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lExporter-&gt;Initialize(lNewFileName, lFormat, lSdkManager-&gt;GetIOSettings());</div><div class="line">lExporter-&gt;Export(lScene);</div></pre></td></tr></table></figure>
<p>这篇短文没什么技术含量，做一小记，希望能够帮助后来人。</p>
<p>附main.cxx代码全文。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/****************************************************************************************</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">   Copyright (C) 2014 Autodesk, Inc.</span></div><div class="line"><span class="comment">   All rights reserved.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">   Use of this software is subject to the terms of the Autodesk license agreement</span></div><div class="line"><span class="comment">   provided at the time of installation or download, or which otherwise accompanies</span></div><div class="line"><span class="comment">   this software in either electronic or hard copy form.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">****************************************************************************************/</span></div><div class="line"></div><div class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// This program converts any file in a format supported by the FBX SDK</span></div><div class="line"><span class="comment">// into DAE, FBX, 3DS, OBJ and DXF files.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Steps:</span></div><div class="line"><span class="comment">// 1. Initialize SDK objects.</span></div><div class="line"><span class="comment">// 2. Load a file(fbx, obj,...) to a FBX scene.</span></div><div class="line"><span class="comment">// 3. Create a exporter.</span></div><div class="line"><span class="comment">// 4. Retrieve the writer ID according to the description of file format.</span></div><div class="line"><span class="comment">// 5. Initialize exporter with specified file format</span></div><div class="line"><span class="comment">// 6. Export.</span></div><div class="line"><span class="comment">// 7. Destroy the exporter</span></div><div class="line"><span class="comment">// 8. Destroy the FBX SDK manager</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fbxsdk.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../Common/Common.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SAMPLE_FILENAME <span class="meta-string">"box.fbx"</span></span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* lFileTypes[] =</div><div class="line">&#123;</div><div class="line">    <span class="string">"_dae.dae"</span>,            <span class="string">"Collada DAE (*.dae)"</span>,</div><div class="line">    <span class="string">"_fbx7binary.fbx"</span>, <span class="string">"FBX binary (*.fbx)"</span>,</div><div class="line">    <span class="string">"_fbx7ascii.fbx"</span>,  <span class="string">"FBX ascii (*.fbx)"</span>,</div><div class="line">    <span class="string">"_fbx6binary.fbx"</span>, <span class="string">"FBX 6.0 binary (*.fbx)"</span>,</div><div class="line">    <span class="string">"_fbx6ascii.fbx"</span>,  <span class="string">"FBX 6.0 ascii (*.fbx)"</span>,</div><div class="line">    <span class="string">"_obj.obj"</span>,            <span class="string">"Alias OBJ (*.obj)"</span>,</div><div class="line">    <span class="string">"_dxf.dxf"</span>,            <span class="string">"AutoCAD DXF (*.dxf)"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="function">FbxString <span class="title">lFilePath</span><span class="params">(<span class="string">""</span>)</span></span>;</div><div class="line">	<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>, c = argc; i &lt; c; ++i )</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>( FbxString(argv[i]) == <span class="string">"-test"</span> ) <span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>( lFilePath.IsEmpty() ) lFilePath = argv[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>( lFilePath.IsEmpty() ) lFilePath = SAMPLE_FILENAME;</div><div class="line"></div><div class="line">    FbxManager* lSdkManager = <span class="literal">NULL</span>;</div><div class="line">    FbxScene* lScene = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Prepare the FBX SDK.</span></div><div class="line">    InitializeSdkObjects(lSdkManager, lScene);</div><div class="line"></div><div class="line">	<span class="keyword">bool</span> lResult = LoadScene(lSdkManager, lScene, lFilePath.Buffer());</div><div class="line">    <span class="keyword">if</span>( lResult )</div><div class="line">    &#123;		</div><div class="line">		<span class="keyword">const</span> <span class="keyword">size_t</span> lFileNameLength = <span class="built_in">strlen</span>((argc&gt;=<span class="number">3</span>)?argv[<span class="number">2</span>]:lFilePath.Buffer());</div><div class="line">        <span class="keyword">char</span>* lNewFileName = <span class="keyword">new</span> <span class="keyword">char</span>[lFileNameLength+<span class="number">64</span>];</div><div class="line">        FBXSDK_strcpy(lNewFileName,lFileNameLength+<span class="number">64</span>,(argc&gt;=<span class="number">3</span>)?argv[<span class="number">2</span>]:lFilePath.Buffer());</div><div class="line"></div><div class="line">        <span class="keyword">const</span> <span class="keyword">size_t</span> lFileTypeCount = <span class="keyword">sizeof</span>(lFileTypes)/<span class="keyword">sizeof</span>(lFileTypes[<span class="number">0</span>])/<span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;lFileTypeCount; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Retrieve the writer ID according to the description of file format.</span></div><div class="line">            <span class="keyword">int</span> lFormat = lSdkManager-&gt;GetIOPluginRegistry()-&gt;FindWriterIDByDescription(lFileTypes[i*<span class="number">2</span>+<span class="number">1</span>]);</div><div class="line"></div><div class="line">            <span class="comment">// Construct the output file name.</span></div><div class="line">            FBXSDK_strcpy(lNewFileName+lFileNameLength<span class="number">-4</span>,<span class="number">60</span>, lFileTypes[i*<span class="number">2</span>]);</div><div class="line"></div><div class="line">            <span class="comment">// Create an exporter.</span></div><div class="line">            FbxExporter* lExporter = FbxExporter::Create(lSdkManager, <span class="string">""</span>);</div><div class="line"></div><div class="line">            <span class="comment">// Initialize the exporter.</span></div><div class="line">			lResult = lExporter-&gt;Initialize(lNewFileName, lFormat, lSdkManager-&gt;GetIOSettings());</div><div class="line">            <span class="keyword">if</span>( !lResult )</div><div class="line">            &#123;</div><div class="line">                FBXSDK_printf(<span class="string">"%s:\tCall to FbxExporter::Initialize() failed.\n"</span>, lFileTypes[i*<span class="number">2</span>+<span class="number">1</span>]);</div><div class="line">                FBXSDK_printf(<span class="string">"Error returned: %s\n\n"</span>, lExporter-&gt;GetStatus().GetErrorString());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Export the scene.</span></div><div class="line">				lResult = lExporter-&gt;Export(lScene);</div><div class="line">                <span class="keyword">if</span>( !lResult )</div><div class="line">                &#123;</div><div class="line">                    FBXSDK_printf(<span class="string">"Call to FbxExporter::Export() failed.\n"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Destroy the exporter.</span></div><div class="line">            lExporter-&gt;Destroy();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">delete</span>[] lNewFileName;</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        FBXSDK_printf(<span class="string">"Call to LoadScene() failed.\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Delete the FBX SDK manager. All the objects that have been allocated</span></div><div class="line">    <span class="comment">// using the FBX SDK manager and that haven't been explicitly destroyed</span></div><div class="line">    <span class="comment">// are automatically destroyed at the same time.</span></div><div class="line">    DestroySdkObjects(lSdkManager, lResult);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用&lt;a href=&quot;http://www.autodesk.com/products/fbx/overview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBX SDK&lt;/a&gt;的时候，导出的FBX默认总是Binary的，也就是说它直接用notepad打开后多数内容是乱码。使用binary的方式可以使文件size变小，但是却失去了可读性，这对于FBX SDK的初学者是很不利的。所以我认为FBX SDK一定会有导出ASCII的方法，然而&lt;a href=&quot;http://help.autodesk.com/view/FBX/2017/ENU/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBX SDK Help文档&lt;/a&gt;里并没有相关的直接指导。最后还是看到了一篇&lt;a href=&quot;http://forums.autodesk.com/t5/fbx-sdk/fbx-export-binary-ascii/td-p/4146847?nobounce&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;论坛文章&lt;/a&gt;才让我茅塞顿开。&lt;br&gt;当然这个论坛讨论中，第一个solution采用了EXP_ASCIIFBX，这个经过测试是无效的，但是第二个方法却很有用。&lt;br&gt;如果只是寻找解决方法的话，那么完全没有必要去点开那个论坛，我会在下面详细说明。&lt;/p&gt;
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="3D" scheme="http://zablog.me/tags/3D/"/>
    
      <category term="FBX" scheme="http://zablog.me/tags/FBX/"/>
    
  </entry>
  
  <entry>
    <title>高等计算机体系结构常用缩写</title>
    <link href="http://zablog.me/2016/06/22/%E9%AB%98%E7%AD%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B8%B8%E7%94%A8%E7%BC%A9%E5%86%99/"/>
    <id>http://zablog.me/2016/06/22/高等计算机体系结构常用缩写/</id>
    <published>2016-06-22T02:00:01.000Z</published>
    <updated>2016-06-22T02:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>缩写</th>
<th>中文</th>
<th>英文全称</th>
</tr>
</thead>
<tbody>
<tr>
<td>VLSI</td>
<td>超大规模集成电路</td>
<td>Very Large Scale Integration</td>
</tr>
<tr>
<td>SMP</td>
<td>对称多处理</td>
<td>Symmetric Multi-Processing</td>
</tr>
<tr>
<td>ILP</td>
<td>指令级并行</td>
<td>Instruction-level parallelism</td>
</tr>
<tr>
<td>TLP</td>
<td>线程级并行</td>
<td>Thread-level parallelism</td>
</tr>
<tr>
<td>RLP</td>
<td>请求级并行</td>
<td>Request-level parallelism</td>
</tr>
<tr>
<td>NUMA</td>
<td>非统一内存访问（架构）</td>
<td>Non Uniform Memory Access Architecture</td>
</tr>
<tr>
<td>ROB</td>
<td>重排序缓冲区</td>
<td>Reorder buffer</td>
</tr>
<tr>
<td>RAID</td>
<td>廉价磁盘冗余阵列</td>
<td>Redundant array of inexpensive disks</td>
</tr>
<tr>
<td>PUE</td>
<td>电力利用效率</td>
<td>Power Utilization Effectiveness</td>
</tr>
<tr>
<td>SISD</td>
<td>单处理器</td>
<td>Single Instrction stream Single Data stream</td>
</tr>
<tr>
<td>SIMD</td>
<td>单指令流多数据流</td>
<td>Single Instrction stream Multiple Data stream</td>
</tr>
<tr>
<td>MIMD</td>
<td>多指令流多数据流</td>
<td>Multiple Instrction stream Multiple Data stream</td>
</tr>
</tbody>
</table>
<p>复习的时候记录的。<br>虽然课本的附录中也有足够多的缩写解释，但是实在是太多了，有重点但是也有很多的是不重要的边角信息。<br>这里是相对重要的12个缩写。即使不从事体系结构相关的研究，其实也应该理解的内容。</p>
]]></content>
    
    <summary type="html">
    
      只要是计算机相关的从业人员，其实都应该理解的几个计算机体系结构的相关词汇。
    
    </summary>
    
      <category term="学习笔记" scheme="http://zablog.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac连不上smb协议？</title>
    <link href="http://zablog.me/2016/06/01/smb/"/>
    <id>http://zablog.me/2016/06/01/smb/</id>
    <published>2016-06-01T06:48:06.000Z</published>
    <updated>2016-06-01T06:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>smb(Server Message Block)协议对于常用NAS的人应该不会陌生。在办公室，家庭安装一个NAS作为存储终端，放置文件、资源、电影，是一件非常方便的事情，尤其是在当今的各路网盘都不是非常安全的情况下，私有的云存储就变得更加重要。</p>
<blockquote>
<p>NAS(Network Attached Storage:网络附属存储)按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为”网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。<br>                ——  360百科</p>
</blockquote>
<p>那么什么是SMB协议呢？</p>
<blockquote>
<p>In computer networking, Server Message Block (SMB), one version of which was also known as Common Internet File System (CIFS, /ˈsɪfs/), operates as an application-layer network protocol mainly used for providing shared access to files, printers, and serial ports and miscellaneous communications between nodes on a network. It also provides an authenticated inter-process communication mechanism. Most usage of SMB involves computers running Microsoft Windows, where it was known as “Microsoft Windows Network” before the subsequent introduction of Active Directory. Corresponding Windows services are LAN Manager Server (for the server component) and LAN Manager Workstation (for the client component).<br>                 —— Wikipedia</p>
</blockquote>
<p>它用起来也极其简单，一般来说，只要连上的相应的局域网，就可以直接在文件夹中访问。<br>譬如在Mac中，如图：<br><img src="http://imglf.nosdn.127.net/img/MGpGUW9CdGlzcDRGK0IyZzFLK0FnSFlwVnhtKyt6MUVVZHQ3NTRaMVhLRG01NTk2ZklGeTdRPT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt="Mac"></p>
<p>*nix都差不多，在Network下一定会有，用同样的方式访问就行了。<br><img src="http://imglf0.nosdn.127.net/img/MGpGUW9CdGlzcDRGK0IyZzFLK0FnSU52ZVdVeEhrMkFETmMwNC9PU3JMeWxId3lBWVRSTllnPT0.png?imageView&amp;thumbnail=1680x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg%7Cwatermark&amp;type=2&amp;text=wqkgWmFjaGFyeSAvIG1hcmNob24ubG9mdGVyLmNvbQ==&amp;font=bXN5aA==&amp;gravity=southwest&amp;dissolve=30&amp;fontsize=340&amp;dx=16&amp;dy=20&amp;stripmeta=0" alt="Linux"></p>
<p>Win的环境下，打开“我的电脑”，smb协议支持项目也一定在那里。手头没有Win的电脑…盗个老图（也许会失效，不过好像不重要）<br><img src="http://about.eserver.org/smb_4.jpg" alt="Win"></p>
<p>但是有一种可能，在Win和Linux都可以开心地访问smb协议的时候，mac却死活登陆不上去。即使连接正确、用户名正确、密码正确，但是依然连接不上。</p>
<p>这个时候，不要犹豫，直接找到NAS，看看日期是否正确？如果日期时间差距太大的话，mac的smb协议是无法进行的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;smb(Server Message Block)协议对于常用NAS的人应该不会陌生。在办公室，家庭安装一个NAS作为存储终端，放置文件、资源、电影，是一件非常方便的事情，尤其是在当今的各路网盘都不是非常安全的情况下，私有的云存储就变得更加重要。&lt;/p&gt;
&lt;blockquo
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="OS X" scheme="http://zablog.me/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>如何删除以-开头的文件</title>
    <link href="http://zablog.me/2016/05/09/console_delete_file/"/>
    <id>http://zablog.me/2016/05/09/console_delete_file/</id>
    <published>2016-05-09T01:39:39.000Z</published>
    <updated>2016-05-09T04:46:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天删除文件的时候遇到一个问题。当我准备清理一个APK列表的时候，发现rm命令不好用了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">zach$ sudo rm -f *</div><div class="line">rm: illegal option -- -</div><div class="line">usage: rm [-f | -i] [-dPRrvW] file ...</div><div class="line">       unlink file</div></pre></td></tr></table></figure>
<p>我开始不知道发生了什么。我一直以来使用的rm命令用错了？<br>后来才发现是下面这个原因。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">zach$ ls | grep <span class="string">"^-"</span></div><div class="line">--9xmvsPkepA4XhroPEFVscy.png</div><div class="line">-xf7j9NNrVbMHTUnqfmw1UiG.apk</div></pre></td></tr></table></figure>
<p>原来是有两个文件是以-打头，导致rm失败。<br>当使用命令rm的时候，接上了这样一个倒霉的文件名，那么rm命令会认为-x是一个参数。然而rm -x是无意义的，所以会报错。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">zach$ rm -xf7j9NNrVbMHTUnqfmw1UiG.apk </div><div class="line">rm: illegal option -- x</div><div class="line">usage: rm [-f | -i] [-dPRrvW] file ...</div><div class="line">       unlink file</div></pre></td></tr></table></figure>
<p>解决方法很简单。</p>
<p>第一种方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm ./-xf7j9NNrVbMHTUnqfmw1UiG.apk</div></pre></td></tr></table></figure>
<p>第二种方法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm -- -xf7j9NNrVbMHTUnqfmw1UiG.apk</div></pre></td></tr></table></figure>
<p>最终我删除这些apk的命令是：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zach$ rm -r -f -- *.apk</div></pre></td></tr></table></figure>
<p>这个虽然没有什么技术含量，但是稍微做一点小记录，防止下次再犯。</p>
<h5 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h5><p>最后的考一个小问题：<br>刚才讲了如何删除一个以“-”开头的文件，那么如何建立一个以“-”开头的文件呢？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This command does not work.</span></div><div class="line">touch <span class="string">"--a"</span></div></pre></td></tr></table></figure>
<p>以上这条命令是不会奏效的。<br>其实答案很简单的，自己思考一下吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天删除文件的时候遇到一个问题。当我准备清理一个APK列表的时候，发现rm命令不好用了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/d
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Unix" scheme="http://zablog.me/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>常见的移动应用分析平台</title>
    <link href="http://zablog.me/2016/05/05/AppAnalysisPlatforms/"/>
    <id>http://zablog.me/2016/05/05/AppAnalysisPlatforms/</id>
    <published>2016-05-05T01:39:39.000Z</published>
    <updated>2016-05-05T09:38:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>市场上的应用分析平台很多很多。这些平台主要是为应用开发者服务的，同时呢也有可能服务于终端用户和应用市场，在这里整理一下这些平台。</p>
<p>为了方便起见，首先列一个表格吧。</p>
<h1 id="应用分析平台类别对比表格"><a href="#应用分析平台类别对比表格" class="headerlink" title="应用分析平台类别对比表格"></a>应用分析平台类别对比表格</h1><table>
<thead>
<tr>
<th></th>
<th>Market Statistics</th>
<th>Advertisement</th>
<th>Ranking Track</th>
<th>In-App Analytics</th>
<th>ASO</th>
<th>Attribute</th>
<th>Compatibility</th>
</tr>
</thead>
<tbody>
<tr>
<td>Appbrain</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td></td>
<td></td>
</tr>
<tr>
<td>AppAnnie</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
</tr>
<tr>
<td>AndroidRank</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Appstatic</td>
<td></td>
<td></td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Mopapp</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Adjust</td>
<td></td>
<td></td>
<td>Y</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>The</td>
<td>Statistics</td>
<td>Below</td>
<td>are</td>
<td>from</td>
<td>-</td>
<td>China</td>
<td>.</td>
</tr>
<tr>
<td>Umeng</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Kuchuan</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td></td>
<td>Y</td>
<td></td>
<td></td>
</tr>
<tr>
<td>ASP100</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Testin</td>
<td></td>
<td></td>
<td></td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>UTest</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>Y</td>
</tr>
<tr>
<td>Imofan</td>
<td></td>
<td></td>
<td></td>
<td>Y</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Huoyanapp</td>
<td></td>
<td></td>
<td>Y</td>
<td></td>
<td>Y</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Iapprank</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>(数据引用请注明原文地址：<a href="http://zablog.me/2016/05/05/AppAnalysisPlatforms/">http://zablog.me/2016/05/05/AppAnalysisPlatforms/</a>)</p>
<h1 id="国外平台"><a href="#国外平台" class="headerlink" title="国外平台"></a>国外平台</h1><ol>
<li><p>App brain -<a href="http://www.appbrain.com/" target="_blank" rel="external">http://www.appbrain.com/</a><br>内容：<br>详细的rating、installs数据（From Google Play）<br>设备数据 包括品牌、系统、国家<br>从Appbrain网站上得到的搜索引擎数据<br>第三方库的数据。<br>盈利模式：</p>
<ul>
<li>面向普通用户，提供应用推荐<br>Google Ads</li>
<li>面向开发者<br>– 推荐应用 - 被广告<br>– 打广告</li>
<li>Market ranking 数据分析<br>– App brain insights<br>– App timer</li>
</ul>
</li>
<li><p>App Annie - <a href="https://www.appannie.com/" target="_blank" rel="external">https://www.appannie.com/</a><br>内容：<br>完全面向软件公司和开发者<br>盈利模式：</p>
<ul>
<li>App Analytics Platform —— User Age Gender etc.</li>
<li>Ads Analytics Dashboard</li>
<li>Market Data Guides Market ranking 数据分析、追踪</li>
</ul>
</li>
<li><p>Distimo - <a href="http://www.distimo.com/" target="_blank" rel="external">http://www.distimo.com/</a><br>已经被AppAnnie 收购</p>
</li>
<li><p>AndoridRank - <a href="http://www.androidrank.org/" target="_blank" rel="external">http://www.androidrank.org/</a><br>内容：<br>Google Play的实时数据<br>优点，有Google Play的完全的历史数据，比如历史rating的波动、何时安装量的波动等等。<br>盈利模式：</p>
<ul>
<li>free数据，投放网页广告。</li>
</ul>
</li>
<li><p>Appstatics <a href="http://www.appstatics.com/" target="_blank" rel="external">http://www.appstatics.com/</a><br>内容：<br>一款iOS应用，用来track &amp; Analyze apps</p>
</li>
<li><p>mopapp - <a href="http://www.mopapp.com/" target="_blank" rel="external">http://www.mopapp.com/</a> （英国）<br>内容<br>B2D开发者服务，应用市场数据分析工具，能够帮助移动应用开发者和开发商更好地跟踪应用数据，支持平台App Store Android RIM WindowsPhone Amazon GetJar。</p>
<ul>
<li>Revenue Analytics </li>
<li>Public Ranking</li>
<li>App Store Comparison</li>
<li>Sentiment Analysis</li>
<li>Detailed App Information</li>
<li>Revenue Forecasting</li>
</ul>
</li>
<li><p>Adjust - <a href="http://www.adjust.com/" target="_blank" rel="external">http://www.adjust.com/</a> （德国）<br>内容</p>
<ul>
<li>“Attribution and analytics for apps, we make data work for you”</li>
<li>Attribution 了解用户来源</li>
<li>Analytics 应用分析</li>
<li>Store Stats 市场的数据 app rank 分析</li>
</ul>
</li>
<li><p>AppsFlyer - <a href="http://www.appsflyer.com/" target="_blank" rel="external">http://www.appsflyer.com/</a><br>内容：<br>Make better mobile app marketing decisions with Attribution Analytics.<br>Track Measure Optimize</p>
</li>
</ol>
<h1 id="国内平台"><a href="#国内平台" class="headerlink" title="国内平台"></a>国内平台</h1><ol>
<li><p>Umeng 友盟 <a href="http://www.umeng.com" target="_blank" rel="external">http://www.umeng.com</a><br>内容：<br>统计分析服务 行业数据解决方案 自助分析工具 运营工具 全域指数 &amp; 运营报告<br>数据内容：<br>手机种类、装机数量、系统比例、机型比例、在不同省份的数据。社交流量分布、应用指数、市场指数等等（Store Rank）。<br>盈利模式：<br>全部面向公司和开发者</p>
<ul>
<li>统计分析</li>
<li>行业解决方案 U-Gplus U-ADplus U-Oplus<br>– U-Gplus Game 流失用户分析、付费率、累计付费用户<br>– U-ADplus 广效宝 广告投放<br>– U-Oplus  Wifi人数智能感应，基于人流量的日常运营分析（线下）</li>
<li>集成工具。 Share、Push、 Login </li>
</ul>
</li>
<li><p>酷传 <a href="http://kuchuan.com" target="_blank" rel="external">http://kuchuan.com</a><br>内容：<br>数据报告，帮助开发者进行应用上传、审核、通过聚合。27个市场（设立市场联系人）帮助各路开发者进行推广。应用监控。<br>盈利模式：</p>
<ul>
<li>帮助开发者发布应用，专业、快速、智能。</li>
<li>监控在多个市场的应用rank数据，提供细粒度的以天计算的rank信息。</li>
<li>数据报告 行业报告、机型总榜、应用总榜、系统比例等等。</li>
</ul>
</li>
<li><p>ASO100 <a href="http://aso100.com" target="_blank" rel="external">http://aso100.com</a><br>内容：<br>最专业的App Store数据平台。应用推广、数据分析。<br>盈利模式：</p>
<ul>
<li>关键词优化、榜单排名提升、优质流量获取。App Store加速审核。</li>
<li>热搜词语榜单、监控、上下线应用监控</li>
<li>应用信息、版本记录、实时排名、关键词、竞品对比、用户评论、评分统计</li>
</ul>
</li>
<li><p>Testin - 云测 <a href="http://www.testin.cn" target="_blank" rel="external">http://www.testin.cn</a><br>内容：<br>内测、兼容性测试、功能测试、崩溃分析、远程真机调试、定制化测试、App推广。<br>盈利模式：<br>为开发者提供测试，可以量身定制测试计划，适用于有特殊需求或者个性化测试服务的应用。<br>全面测试、重点Bug探索、多人在线测试、指定设备验证、兼容性、用户体验反馈、安全测试、A/B测试、流量打假……</p>
</li>
<li><p>优测 - Tencent <a href="http://utest.qq.com/" target="_blank" rel="external">http://utest.qq.com</a><br>内容：<br>和云测类似的功能，抄的，但是暂时还不够成熟。</p>
</li>
<li><p>魔方 <a href="http://www.imofan.com/" target="_blank" rel="external">http://www.imofan.com/</a><br>内容：<br>移动应用的数据dashboard、开发组件、消息推送、自定义事件等。一个开发辅助工具。</p>
</li>
<li><p>清源火眼 <a href="http://www.huoyanapp.com" target="_blank" rel="external">http://www.huoyanapp.com</a><br>内容：<br>榜单、排行，洞察应用数据。检测超过300万个应用运营数据，涵盖下载量、活跃量、用户评价等多个数据检测维度，帮助开发者做出正确决策。<br>可以分析应用概况、渠道监测、用户分析、人群分析、关联应用。<br>ASO优化</p>
</li>
<li><p>爱排行 - <a href="http://iapprank.com" target="_blank" rel="external">http://iapprank.com</a><br>内容：<br>iOS Android 应用实时榜单，月度排名，趋势对比，关注列表<br>初创公司，网站做得还比较一般。</p>
</li>
<li><p>应用雷达 - <a href="http://www.ann9.com" target="_blank" rel="external">http://www.ann9.com</a><br>内容：<br>iOS实时排名、总榜、排名分析、上升下降、App监控。<br>深度ASO和雷达分析<br>提高交互活跃度，优化App生命周期。<br>只有iOS 无Android</p>
</li>
<li><p>应用微风 - <a href="http://www.appvf.com/" target="_blank" rel="external">http://www.appvf.com/</a><br>内容<br>iOS 总榜、分类榜单。<br>历史快照（rank上升下降）<br>热搜榜<br>ASO指数<br>精品应用推荐</p>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现有平台多数拥有的数据是市场的rank、rating、installs数据，因此这些平台主要为开发者提供了rank追踪的服务。<br>另外最多的就是ASO等应用推广、应用上架的帮助工作。<br>还有一些做的是全方位的测试，包括机型测试、系统兼容性测试、各种内测等等。<br>在应用加固，隐私和应用漏洞检测方面，这些平台做得显然不足。然而，无论是对于开发者还是普通用户，隐私与安全漏洞显然都是非常重要的。我相信这是市场上的一个迫切需求。<br>未来移动应用和移动应用的分析平台讲如何发展，让我们拭目以待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;市场上的应用分析平台很多很多。这些平台主要是为应用开发者服务的，同时呢也有可能服务于终端用户和应用市场，在这里整理一下这些平台。&lt;/p&gt;
&lt;p&gt;为了方便起见，首先列一个表格吧。&lt;/p&gt;
&lt;h1 id=&quot;应用分析平台类别对比表格&quot;&gt;&lt;a href=&quot;#应用分析平台类别对比表格
    
    </summary>
    
      <category term="技术指南" scheme="http://zablog.me/categories/%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Android" scheme="http://zablog.me/tags/Android/"/>
    
  </entry>
  
</feed>
